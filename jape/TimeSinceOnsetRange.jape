Phase: TimeSinceOnsetRange
Input: Lookup Person timePeriod timeElapsed Lookup2 Split MedCause Range Sentence

Options: control=appelt
 /*a bit complex rules that spill over to other sentences  - may need to be revised*/

Rule: seizuresForRange1
Priority: 100

(   
    
	({Lookup.majorType == umls , Lookup.Negation == Affirmed, Lookup.Experiencer == Patient , Lookup.minorType == Disease }):item
	{Split}
	{Person}
    ({Person})?
	{MedCause.majorType == context}
	{timeElapsed.time == during}
	{Range}
    {timePeriod}
 ):match  
 -->
:item.Onset = {rule = seizuresForRange1 , OnsetType = "time_since_episodes_started",
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, Negation = :item.Lookup.Negation, Experiencer = :item.Lookup.Experiencer,
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods = "",
LowerNumberOfTimePeriods =:match.NumberRange.N1,
UpperNumberOfTimePeriods =:match.NumberRange.N2}


Rule: seizuresForRange2
Priority: 99

(  

	{Person}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed, Lookup.Experiencer == Patient , Lookup.minorType == Disease }):item
	{Lookup2.language == onset, Lookup2.type != diagnosed }
	{Range}
    {timePeriod}
    {timeElapsed.time == since}
 ):match  
 -->
:item.Onset = {rule = seizuresForRange2 , OnsetType = "time_since_episodes_started",
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, Negation = :item.Lookup.Negation, Experiencer = :item.Lookup.Experiencer,
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods = "",
LowerNumberOfTimePeriods =:match.NumberRange.N1,
UpperNumberOfTimePeriods =:match.NumberRange.N2}