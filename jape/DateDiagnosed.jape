Phase: DateDiagnosed
Input: Lookup Person Lookup2 Sentence Numeric timeElapsed PartielDate DiagnosisTriggers PointInTime

Options: control=appelt


Rule: DateDiagnosed1
Priority: 100

(   
	{Person}
	{Lookup2.majorType == historic}
    {DiagnosisTriggers.majorType == diagnosis}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed}):item
	{timeElapsed.time == in , timeElapsed.time != during}
	{Numeric}

 
	
 ):match  
 -->
:item.WhenDiagnosed = {rule = DateDiagnosed1, OnsetType = "Year_Diagnosed", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
DateYear = :match.Numeric.value,
/*PointInTime = "",
DateMonth ="",
DateDay = "",
PointInTime = "",
TimePeriod = "",
NumberOfTimePeriods ="",
LowerNumberOfTimePeriods = "",
UpperNumberOfTimePeriods = "",
AgeLower ="",
AgeUpper = "",
Age =  "" ,*/ 
AgeUnit ="Year",}

Rule: DateDiagnosed2
Priority: 100

(   
	{Person}
	{Lookup2.majorType == historic}
    {DiagnosisTriggers.majorType == diagnosis}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed}):item
	({Lookup2})?
	({Person})?
	{PointInTime}
	

 
	
 ):match  
 -->
:item.WhenDiagnosed = {rule = DateDiagnosed2, OnsetType = "When_Diagnosed", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
PointInTime = :match.PointInTime.Since,
AgeUnit ="Year",
/*DateYear = "",
DateMonth ="",
DateDay = "",
PointInTime = "",
TimePeriod = "",
NumberOfTimePeriods ="",
LowerNumberOfTimePeriods = "",
UpperNumberOfTimePeriods = "",
AgeLower ="",
AgeUpper = "",
Age =  ""*/}
