Imports: {import static gate.Utils.*; }

Phase: ModifyLookup
Input:Lookup Lookup2 Lookup3
Options: control=all

/*
 * if not certainty terms found, use Lookup.Negation to assign default value
*/


Rule: default1
Priority: 99
(
	({Lookup.majorType == umls, Lookup.Certainty==~"(?i)", Lookup.Negation=="Affirmed"}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Certainty","5");
  getOnlyAnn(umlsAnnots).getFeatures().put("Rule","defrulea");
}

Rule: default1a
Priority: 99
(
	({Lookup3.majorType == umls, Lookup3.Certainty==~"(?i)", Lookup3.Negation=="Affirmed"}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Certainty","5");
  getOnlyAnn(umlsAnnots).getFeatures().put("Rule","defruleb");
}





Rule: default2
Priority: 99
(
	({Lookup.majorType == umls, Lookup.Certainty ==~"(?i)", Lookup.Negation=="Negated"}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Certainty","1");
  getOnlyAnn(umlsAnnots).getFeatures().put("Rule","defrulec");
}

Rule: default2
Priority: 99
(
	({Lookup3.majorType == umls, Lookup3.Certainty ==~"(?i)", Lookup3.Negation=="Negated" }):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Certainty","1");
  getOnlyAnn(umlsAnnots).getFeatures().put("Rule","defruled");
}





Rule: default2
(
	({Lookup.Certainty ==" "}):umls
):match
-->
:umls.Found = {
  rule = "found"
}
