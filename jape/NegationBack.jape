Imports: {import static gate.Utils.*; }

Phase: NegationCleanUp
Input: NegConj Lookup Sentence Trigger Lookup3 but 
Options: control=all


// no non-epileptic seizures - would deleting the contains "non" mean that all the rules would work fine 
// and this wont be needed
// for now rule is fine and should work well
Rule: PutNegation
(
{Trigger.majorType == negation}  
({Lookup3 contains Trigger@string=="non"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","PutNegationa");
},
:match.Lookup3NegChange = {rule = PutNegationa}

//need example
Rule: PutNegation
(
{Trigger.majorType == negation} 
{Trigger.majorType == temporality} 
{NegConj}
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","PutNegationb");
},
:match.Lookup3NegChange = {rule = PutNegationb}

// need example
Rule: PutNegation
(
{Trigger.majorType == negation} 
{Trigger.majorType == temporality} 
{NegConj.majorType == negation}
{Lookup3}
({NegConj.majorType == negation})?
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","PutNegationc");
},
:match.Lookup3NegChange = {rule = PutNegationc}

// need example
// looks like no Lookup, lookup or Lookup (negating the 3rd one)
Rule: PutNegation
(
{Trigger.majorType == negation} 
{Trigger.majorType == temporality} 
{NegConj.majorType == negation}
{Lookup3}
({NegConj.majorType == negation})?
{Lookup3}
({NegConj.majorType == negation})
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","PutNegationd");
},
:match.Lookup3NegChange = {rule = PutNegationd}

// why wouldn't this rule be done by ContextTagger normally?
// need to see example
// Also just rule above with slightly more detail
Rule: NegationBack
(
{Trigger.majorType == negation, Trigger.minorType == pre-condition} 
({NegConj})?
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","NegationBacka");
},
:match.Lookup3NegChange = {rule = NegationBacka}

// why wouldn't this rule be done by ContextTagger normally?
// need to see example
// but maybe context tagger not running to second Lookup term
Rule: NegationBack
(
{Trigger.majorType == negation, Trigger.minorType == pre-condition} 
{Lookup3}
({NegConj})?
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","NegationBackb");
},
:match.Lookup3NegChange = {rule = NegationBackb}

// why wouldn't this rule be done by ContextTagger normally?
// need to see example
// but maybe context tagger not running to third Lookup term
Rule: NegationBack
(
{Trigger.majorType == negation, Trigger.minorType == pre-condition} 
({NegConj})?
{Lookup3}
({NegConj})?
{Lookup3}
({NegConj})?
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","NegationBackc");
},
:match.Lookup3NegChange = {rule = NegationBackc}

// why wouldn't this rule be done by ContextTagger normally?
// need to see example
// but maybe context tagger not running to 4th Lookup term
Rule: NegationBack
(
{Trigger.majorType == negation, Trigger.minorType == pre-condition} 
{Lookup3}
({NegConj})?
{Lookup3}
({NegConj})?
{Lookup3}
({NegConj})?
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","NegationBackd");
},
:match.Lookup3NegChange = {rule = NegationBackd}