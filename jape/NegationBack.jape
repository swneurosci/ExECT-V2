Imports: {import static gate.Utils.*; }

Phase: NegationCleanUp
Input: NegConj Lookup Sentence Trigger Lookup3
Options: control=all



Rule: PutNegation

(
{Trigger.majorType == negation}  
({Lookup3 contains Trigger@string=="non"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","PutNegation");
}

Rule: PutNegation

(
{Trigger.majorType == negation} 
{Trigger.majorType == temporality} 
{NegConj}
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","PutNegation");
}

Rule: PutNegation

(
{Trigger.majorType == negation} 
{Trigger.majorType == temporality} 
{NegConj.majorType == negation}
{Lookup3}
({NegConj.majorType == negation})?
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","PutNegation");
}

Rule: PutNegation

(
{Trigger.majorType == negation} 
{Trigger.majorType == temporality} 
{NegConj.majorType == negation}
{Lookup3}
({NegConj.majorType == negation})?
{Lookup3}
({NegConj.majorType == negation})
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","PutNegation");
}

Rule: NegationBack

(
{Trigger.majorType == negation, Trigger.minorType == pre-condition} 
({NegConj})?
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","NegationBack");
}


Rule: NegationBack

(
{Trigger.majorType == negation, Trigger.minorType == pre-condition} 
{Lookup3}
({NegConj})?
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","NegationBack");
}

Rule: NegationBack

(
{Trigger.majorType == negation, Trigger.minorType == pre-condition} 
({NegConj})?
{Lookup3}
({NegConj})?
{Lookup3}
({NegConj})?
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","NegationBack");
}

Rule: NegationBack

(
{Trigger.majorType == negation, Trigger.minorType == pre-condition} 
{Lookup3}
({NegConj})?
{Lookup3}
({NegConj})?
{Lookup3}
({NegConj})?
({Lookup3.Negation == Affirmed}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Negated");
umlsAnnots.iterator().next().getFeatures().put("rule","NegationBack");
}