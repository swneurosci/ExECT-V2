Phase: OtherDiagPhrase
Input: Lookup3 PartialDate Age Sentence SFBlock Person Conj TimeSince DateSince DateBio Lookup2 SeizFreq SeizFrequency2 Split timeElapsed PointInTime

/* To annotate Lookup3 Other diseases or generic seizures when listed in listSent with age, dates */
Options: control=Appelt


Rule: OtherDiagDate
Priority: 100

(  
	
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, Lookup3.Experiencer == Patient , Lookup3.PREF !~ " birth", Lookup3.CUI != C0009952}|
	{Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Experiencer == Patient, Lookup3.Temporality != hypothetical, Lookup3.Negation == Affirmed }):item
	({Conj})?
    ({PartialDate})
	

 ):match  
 -->
:item.OtherDiag = {rule = OtherDiagDate, r = "1", PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty,
YearDate = :match.PartialDate.year,
MonthDate =:match.PartialDate.month}

Rule: OtherDiagDate
Priority: 100

(  
	
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, Lookup3.Experiencer == Patient , Lookup3.PREF !~ " birth", Lookup3.CUI != C0009952}|
	{Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Experiencer == Patient, Lookup3.Temporality != hypothetical, Lookup3.Negation == Affirmed }):item
	({Conj})?
	({timeElapsed})?
    ({DateSince})
	

 ):match  
 -->
:item.OtherDiag = {rule = OtherDiagDate, r = "2", PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty,
YearDate = :match.DateSince.YearDate,
MonthDate =:match.DateSince.MonthYear}

Rule: OtherDiagDate
Priority: 100

(  
	
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, Lookup3.Experiencer == Patient , Lookup3.PREF !~ " birth", Lookup3.CUI != C0009952}|
	{Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Experiencer == Patient, Lookup3.Temporality != hypothetical, Lookup3.Negation == Affirmed }):item
	({Lookup2})?
    ({DateSince})
	

 ):match  
 -->
:item.OtherDiag = {rule = OtherDiagDate, r = "3", PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty,
YearDate = :match.DateSince.YearDate,
MonthDate =:match.DateSince.MonthYear}

Rule: OtherDiagDate
Priority: 99

(  
	({PartialDate})
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, Lookup3.Experiencer == Patient ,Lookup3.PREF !~ " birth", Lookup3.CUI != C0009952}|
	{Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Experiencer == Patient, Lookup3.Temporality != hypothetical, Lookup3.Negation == Affirmed }):item
   
 ):match  
 -->
:item.OtherDiag = {rule = OtherDiagDate, r = "4", PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty,
YearDate = :match.PartialDate.year,
MonthDate =:match.PartialDate.month}

Rule: OtherDiagTime
Priority: 100

(  
	({Lookup3.minorType == OtherDisease,  Lookup3.Negation == Affirmed, Lookup3.majorType == umls,Lookup3.PREF !~ " birth", Lookup3.CUI != C0009952, Lookup3.Experiencer == Patient}|
	{Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Experiencer == Patient, Lookup3.Temporality != hypothetical, Lookup3.Negation == Affirmed }):item
	({Lookup2.language == onset})?
    ({TimeSince})
	

 ):match  
 -->
:item.OtherDiag = {rule = OtherDiagTime, r = "1", PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty,
TimePeriod = :match.TimeSince.TimePeriod,
NumberOfTimePeriods = :match.TimeSince.NumberOfTimePeriods}

Rule: OtherDiagTime
Priority: 100

(  
	({TimeSince})
	({Lookup2.language == onset})?
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls,Lookup3.PREF !~ " birth", Lookup3.CUI != C0009952, Lookup3.Experiencer == Patient}|
	{Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Experiencer == Patient, Lookup3.Temporality != hypothetical, Lookup3.Negation == Affirmed }):item
    
	

 ):match  
 -->
:item.OtherDiag = {rule = OtherDiagTime, r = "2", PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty,
TimePeriod = :match.TimeSince.TimePeriod,
NumberOfTimePeriods = :match.TimeSince.NumberOfTimePeriods}



Rule: OtherDiagDate  /*only when date is given as Year, so may work as the patial date */
Priority: 100

(  
	({Lookup3.minorType == OtherDisease,  Lookup3.Negation == Affirmed, Lookup3.majorType == umls,Lookup3.PREF !~ " birth", Lookup3.CUI != C0009952, Lookup3.Experiencer == Patient}|
	{Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Experiencer == Patient, Lookup3.Temporality != hypothetical, Lookup3.Negation == Affirmed }):item
    ({DateSince.YearDate >1930})
	

 ):match  
 -->
:item.OtherDiag = {rule = OtherDiagDate, r = "4", PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty,
YearDate = :match.DateSince.YearDate}


Rule: OtherDiagAge
Priority: 100

(  
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls,Lookup3.PREF !~ " birth", Lookup3.CUI != C0009952, Lookup3.Experiencer == Patient}|
	{Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Experiencer == Patient, Lookup3.Temporality != hypothetical, Lookup3.Negation == Affirmed }):item
   ({Lookup2.language == onset})?
   ({Age})
	

 ):match  
 -->
:item.OtherDiag = {rule = OtherDiagAge, r = "1", PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty,
Age = :match.Age.Age,
AgeUnit = :match.Age.AgeUnit,
AgeLower = :match.Age.AgeLower,
AgeUpper =:match.Age.AgeUpper}

Rule: OtherDiagAge
Priority: 100

(  
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls,Lookup3.PREF !~ " birth", Lookup3.CUI != C0009952, Lookup3.Experiencer == Patient}|
	{Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Experiencer == Patient, Lookup3.Temporality != hypothetical, Lookup3.Negation == Affirmed }):item
	({Lookup2.language == onset})?
    ({Age})
	

 ):match  
 -->
:item.OtherDiag = {rule = OtherDiagAge, r = "2", PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty,
AgeUnit = :match.Age.AgeUnit,
AgeLower = :match.Age.AgeLower,
AgeUpper =:match.Age.AgeUpper,
Age =:match.Age.Age}

Rule: OtherDiagPhrase
Priority: 100

(
	
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls,Lookup3.PREF !~ " birth", Lookup3.CUI != C0009952, Lookup3.Experiencer == Patient}|
	{Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Experiencer == Patient, Lookup3.Temporality != hypothetical, Lookup3.Negation == Affirmed }):item
    ({Lookup2.language == onset})?
	{PointInTime}
	

 ):match  
 -->
:item.OtherDiag = {rule = OtherDiagPhrase, r = "1", PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty,
PointInTime = :match.PointInTime.Since}


Rule: OtherDiagPhrase
Priority: 99

(  
	
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.Temporality != hypothetical, Lookup3.majorType == umls, Lookup3.PREF !~ " birth", Lookup3.CUI != C0009952,  Lookup3.Experiencer == Patient}|
	{Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Experiencer == Patient, Lookup3.Temporality != hypothetical, Lookup3.Negation == Affirmed }):item

 ):match  
 -->
:item.OtherDiag = {rule = OtherDiagPhrase, r = "2" PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty}