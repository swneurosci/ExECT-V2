Phase: OtherDiagnosisB
Input: OtherDiag Lookup3 Lookup2 Lookup Split Investigation timeElapsed timePeriod DiagnosisTriggers listPoint 

/*Removed Sentence from these rules as some items are within list without listPoints, may have to
use some other means of stopping the rules from picking up everything from the text*/

Options: control=appelt

Rule: OtherDiagB
Priority: 100

(   
	{DiagnosisTriggers.majorType == diagnosis}
	({Lookup2})*
	({Lookup3})
	({OtherDiag.rule == OtherDiagTime}):item
	
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagB, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty,
TimePeriod = :item.OtherDiag.TimePeriod,
NumberOfTimePeriods = :item.OtherDiag.NumberOfTimePeriods}


Rule: OtherDiagB1
Priority: 100

(   
	{DiagnosisTriggers.majorType == diagnosis}
	({Lookup2.minorType == probability})?
	({OtherDiag})
	({Lookup2})?
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagB1, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty}

/* Rule: OtherDiagB3
Priority: 100

(   ({!Investigation})
	{Lookup2.minorType == opinion}
	({Lookup2.minorType == probability})?
    ({Lookup3})?
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagB3, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty} */

Rule: OtherDiagB4
Priority: 100

(   
	{Lookup2.minorType == opinion}
	({Lookup2.minorType == probability})?
    {Lookup3}
	{Lookup3}
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagB4, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty}

Rule: OtherDiagB5  /*trying to stop this fiering when it is a top list*/
Priority: 100

(  
	
	{Lookup2.minorType == probability} 
	({Lookup3})
	{Lookup}
	({Lookup2})?
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagB5, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty}

/*Rule: OtherDiagB6
Priority: 100

(   
	({OtherDiag}):item
	{Lookup2.minorType == opinion} 
	{Lookup2.minorType == opinion} 
	
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagB6, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty}*/

Rule: OtherDiagB7
Priority: 100

(   
	{Lookup2.minorType == probability}
	{DiagnosisTriggers}
	({Lookup2})?
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagB7, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty}

Rule: OtherDiagB8 /*2nd item in a list without any points*/
Priority: 100

(   
	
	{DiagnosisTriggers}
	({OtherDiag})
	({Split})
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagB8, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty}
