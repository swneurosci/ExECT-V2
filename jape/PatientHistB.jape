Phase: PatientHistB
Input:   OtherDiag Experience Conj DateSince CausePhrase TimeSince Person Age Sentence PartialDate PointInTime Split DiagnosisTriggers listPoint OnsetPhrase


/*additional rules to annotate items in patient history when they are stated one after another in longer sentences
keeping the  appelt mode. As in PatientHistoryA the rules annotate events as - type of event with an UMLS CUI, 
age (precise and as a range), date as year/month, and time since the event, as TimePeriod / NumberOfTimePeriods) */
//DiagnosisTriggers used as a block

Options: control=appelt

/*2nd mention of OtherDiag in a sentence  where DateSince in at the very begining of the phrase*/
Rule: PtHistoryB1 
Priority: 100

(  

	({!Person.type == subject})
	({Person})
    ({Experience.type == suffrered})
	{OtherDiag}
	({Person})?
	({OtherDiag }):item
	
    
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB1, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC,TUI = :item.OtherDiag.TUI, 
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, Negation = :item.OtherDiag.Negation,
YearDate = :item.OtherDiag.YearDate}

/*2nd mention of otherDiag in a sentence, with TimeSince not that close to the concept*/
Rule: PtHistoryB2
Priority: 100

(   {TimeSince}
	{Person}
    ({Experience.type == suffered}|{Experience.type == experiencing})
	{OtherDiag}
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB2, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC, TUI = :item.OtherDiag.TUI, 
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty,Negation = :item.OtherDiag.Negation,
TimePeriod = :match.TimeSince.time-unit,
NumberOfTimePeriods =:match.TimeSince.value}


Rule: PtHistoryB3   /*2nd mention of other diag in one sentence*/
Priority: 100

(  
	{OtherDiag}
	{Person}
	{OnsetPhrase}
	({OtherDiag}):item
	 
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB3, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC, TUI = :item.OtherDiag.TUI,
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty,  Negation = :item.OtherDiag.Negation,
AgeUnit = :item.OtherDiag.Age,
Age = :item.OtherDiag.Age,
AgeLower =:item.OtherDiag.AgeLower,
AgeUpper =:item.OtherDiag.AgeUpper} 



Rule: PtHistoryB4  /*This is trying to assign new Age features to OtherDiag annotated in PatHistA - doesn't seem to work*/
Priority: 100

(   
	{Experience.type == suffered}
	({OtherDiag}):item
	({Age})
	({Age}):a
	
    
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB4, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC, TUI = :item.OtherDiag.TUI,
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty,  Negation = :item.OtherDiag.Negation,
AgeUnit = :a.Age.Unit,
Age =:a.Age.Age,
AgeLower =:a.Age.AgeLower,
AgeUpper =:a.Age.AgeUpper}


Rule: PtHistoryB5
Priority: 100

(   
	{Person}
	{OtherDiag}
	({Age}):a
	({Person})?
	({Person})
	({Experience.type == suffered})
	({OtherDiag}):item
		   
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB5, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC, TUI = :item.OtherDiag.TUI, 
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, Negation = :item.OtherDiag.Negation,
AgeUnit = :a.Age.AgeUnit,
Age =:a.Age.Age,
AgeLower =:a.Age.AgeLower,
AgeUpper =:a.Age.AgeUpper}

Rule: PtHistoryB6
Priority: 100

(   
	({DateSince})
	{Person}
	{OtherDiag}
	({OtherDiag}):item
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB6, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC, TUI = :item.OtherDiag.TUI, 
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, Negation = :item.OtherDiag.Negation,
YearDate = :match.DateSince.YearDate}


Rule: PtHistoryB7  //2nd in a list od otherdiag//
Priority: 80

(   
	({Person})
    {Experience.type == suffered}
    {OtherDiag}
	({OtherDiag}):item
   

 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB7, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC,TUI = :item.OtherDiag.TUI,
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality,  
Negation = :item.OtherDiag.Negation,
Certainty = :item.OtherDiag.Certainty} 

Rule: PtHistoryB7a  /*2nd other diag within an opinion statement*/
Priority: 70

(  
	({OtherDiag})
	({OtherDiag.rule == OtherDiagPhrase}):item
	
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB7a, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC,TUI = :item.OtherDiag.TUI
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Negation = :item.OtherDiag.Negation,
Certainty = :item.OtherDiag.Certainty}


Rule: PtHistoryB8
Priority: 98

(   
	{Person}
    ({Experience.type == experiencing})
    {OtherDiag}
    ({Person})?
	({OtherDiag}):item


 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB8, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC, TUI = :item.OtherDiag.TUI,
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, Negation = :item.OtherDiag.Negation,
MonthDate = :match.OtherDiag.MonthDate,
YearDate = :match.OtherDiag.YearDater}

Rule: PtHistoryB9
Priority: 100

(   
	{Person}
    {Experience}
	{OtherDiag}
	({OtherDiag}):item
   	({PointInTime})?

 
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB9, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC, TUI = :item.OtherDiag.TUI, 
//Experiencer = :item.OtherDiag.Experiencer, Temporality = Recent, 
Certainty = :item.OtherDiag.Certainty, Negation = :item.OtherDiag.Negation,
PointInTime = :match.PointInTime.Since,
MonthDate =:match.Lookup2.month}

/* when date is written in a long format so DateBio has to be used, it also puts temporality to Recent*/
Rule: PtHistoryB11  
Priority: 98

(   
	{Person}
	({OtherDiag.rule == OtherDiagPhrase}):item
   	{Experience.type == suffered}
   	{DateSince}

 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB11, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC, TUI = :item.OtherDiag.TUI, 
//Experiencer = :item.OtherDiag.Experiencer, Temporality = Recent, 
Certainty = :item.OtherDiag.Certainty,Negation = :item.OtherDiag.Negation,
DayDate =:match.DateBio.DayDate,
MonthDate =:match.DateBio.MonthDate,
YearDate =:match.DateBio.YearDate}

Rule: PtHistoryB12
Priority: 100

(   
	{Person}
	({OtherDiag})
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB12, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC, TUI = :item.OtherDiag.TUI, 
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality,
 Negation = :item.OtherDiag.Negation,
Certainty = :item.OtherDiag.Certainty}



Rule: PtHistoryB13  /* She had an injury due to seizure in  Date - this is to capture the 2nd mention i.e. seizure that may have a date */
// 
Priority: 50

(   
    ({OnsetPhrase})
	({OtherDiag})
    {Person}
	({OtherDiag}):item
  
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB13, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC, TUI = :item.OtherDiag.TUI,
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, Negation = :item.OtherDiag.Negation,
DayDate =:item.OtherDiag.DayDate,
MonthDate =:match.OtherDiag.MonthDate,
YearDate = :match.OtherDiag.YearDate}



Rule: PtHistoryB14 /*he had a seizure and probably another seizure*/
Priority: 100
(   
	({!Person})
	({Person})
	{Experience}
	{OtherDiag }
	({OtherDiag }):item
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB14, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC, TUI = :item.OtherDiag.TUI, 
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, Negation = :item.OtherDiag.Negation,
AgeUnit =:match.OtherDiag.AgeUnit,
Age =:match.OtherDiag.Age,
AgeUnit = :match.OtherDiag.AgeUnit,
AgeUpper =:match.OtherDiag.AgeUpper}


Rule: PtHistoryB15 //using list point to stop the rule picking up items within a list
Priority: 99

( 
	({!listPoint})
	({Age})?
	({Person})?
	({!listPoint})
	({Person})?
	({OtherDiag})
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB15, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC= :item.OtherDiag.EC, TUI = :item.OtherDiag.TUI, 
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty,Negation = :item.OtherDiag.Negation,
AgeUnit =:match.Age.AgeUnit,
Age =:match.Age.Age,
AgeLower = :match.Age.AgeLower,
AgeUpper =:match.Age.AgeUppe}


Rule: PtHistoryB15   /*when history is of an episodes that started on X date  but too far to be captured by OtherDiag with partial date */
// (he) sufferes head injury as a result of his RTA in 2012 - this captures the RTA (PatientHistA would captures the head injury)
Priority: 90 

(   
	({Person})?
	({Experience})?
	({OtherDiag.rule == OtherDiagPhrase})
	({CausePhrase})
	({Person})?
	({OtherDiag}):item

 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistoryB15, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC = :item.OtherDiag.EC, 
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty,Negation = :item.OtherDiag.Negation, 
DayDate = :item.OtherDiag.DayDate,
MonthDate = :item.OtherDiag.MonthDate,
YearDate = :item.OtherDiag.YearDate}


Rule: PtHistoryB16  /*  OtherDiagnosis combined with Age, TimeSince, date  in OtherDiag  which follows another diagnosis annotated in PHA */ 
//she had a stroke with hemiparesis in 2017  - to get the second of the two with age, date ot time since
Priority: 100
	
(  
	({OtherDiag.rule == OtherDiagPhrase})
	({Conj.type == "with"})
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistoryB = {rule = PtHistory16, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC = :item.OtherDiag.EC,  
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, Negation = :item.OtherDiag.Negation,
AgeUnit = :item.OtherDiag.AgeUnit,
AgeLower = :item.OtherDiag.AgeLower,
AgeUpper = :item.OtherDiag.AgeUpper,
Age = :item.OtherDiag.Age,
DayDate = :item.OtherDiag.MonthDate,
MonthDate = :item.OtherDiag.MonthDate,
YearDate = :item.OtherDiag.YearDate,
TimePeriod = :item.OtherDiag.TimePeriod,
LowerNumberOfTimePeriods = :item.OtherDiag.LowerNumberOfTimePeriods,
UpperNumberOfTimePeriods = :item.OtherDiag.UpperNumberOfTimePeriods,
NumberOfTimePeriods = :item.OtherDiag.NumberOfTimePeriods}


// top of letter two comorbidities and one date - ' myoclonic jerks and absences since...age, date, time
Rule: PtHistoryB17
Priority: 100

(   
	
	({DiagnosisTriggers.type == diagnosis})
	({OtherDiag})
	({Conj.type == conj})
	({OtherDiag}):item

 
 ):match  
 -->
:item.PatientHistoryA = {rule = PtHistoryB17, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
EC = :item.OtherDiag.EC,  
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, Negation = :item.OtherDiag.Negation,
TimePeriod = :item.OtherDiag.TimePeriod,
NumberOfTimePeriods = :item.OtherDiag.NumberOfTimePeriods,
AgeUnit = :item.OtherDiag.AgeUnit,
Age =:item.OtherDiag.Age,
AgeLower = :item.OtherDiag.AgeLower,
AgeUpper =:item.OtherDiag.AgeUpper,
DayDate =:item.OtherDiag.DayDate,
MonthDate = :item.OtherDiag.MonthDate,
YearDate =:item.OtherDiag.YearDate}