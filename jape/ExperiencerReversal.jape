Imports: {import static gate.Utils.*; }

Phase: ModifyLookup
Input: OtherPerson Lookup2 Person Lookup3 Lookup
Options: control=brill

/*
 * If "Other person" reports events relating to a family member it assigns these 
 events to that family member not to a person reporting the events i.e Experiencer = Patient
*/


Rule: ExperiencerReversal
Priority: 100
(
	{OtherPerson.majorType == family}
    ({Lookup2})?
    {Lookup2.language == onset}
    {Person.kind == firstName}
	({Lookup.majorType == umls, Lookup.minorType == Disease, 
    Lookup.Experiencer == Other}|{Lookup3.majorType == umls, Lookup3.minorType == Disease, 
    Lookup3.Experiencer == Other}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal");

}


Rule: ExperiencerReversal
Priority: 100
(
	{OtherPerson.majorType == family}
    ({Lookup2})?
    {Lookup2.language == onset}
    {Person.kind == firstName}
    {Lookup}
    ({Lookup3})?
	({Lookup.majorType == umls, Lookup.minorType == Disease, 
    Lookup.Experiencer == Other}|{Lookup3.majorType == umls, Lookup3.minorType == Disease, 
    Lookup3.Experiencer == Other}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal");
}

Rule: ExperiencerReversal
Priority: 100
(
  {Lookup2.minorType == opinion}
	{Person.majorType == person, Person.minorType == pronoun}
  {OtherPerson.majorType == family}
	({Lookup3.majorType == umls, Lookup3.minorType == OtherDisease, 
    Lookup3.Experiencer == Other}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal");
}
