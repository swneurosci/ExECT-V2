Imports: {import static gate.Utils.*; }

Phase: ModifyLookup
Input: OtherPerson Lookup2 Person Lookup3 Lookup Conj Sentence
Options: control=brill

/*
 * If "Other person" reports events relating to a family member it assigns these 
 events to that family member not to a person reporting the events i.e Experiencer = Patient
*/


Rule: ExperiencerReversal1

(
	{OtherPerson.majorType == family}
    ({Lookup2})?
    {Lookup2.language == onset}
    {Person.kind == firstName}
	({Lookup.majorType == umls, Lookup.minorType == Disease, 
    Lookup.Experiencer == Other}|{Lookup3.majorType == umls, Lookup3.minorType == Disease, 
    Lookup3.Experiencer == Other}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal1");
},
:umls.Lookup3ExpChange = {rule = ExperienceReversal1}


Rule: ExperiencerReversal2

(
	{OtherPerson.majorType == family}
    ({Lookup2})?
    {Lookup2.language == onset}
    {Person.kind == firstName}
    {Lookup}
    ({Lookup3})?
    ({Conj})?
	({Lookup.majorType == umls, Lookup.minorType == Disease, 
    Lookup.Experiencer == Other}|{Lookup3.majorType == umls, Lookup3.minorType == Disease, 
    Lookup3.Experiencer == Other}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal2");
},
:umls.Lookup3ExpChange = {rule = ExperienceReversal2}

Rule: ExperiencerReversal3

(
  {Lookup2.minorType == opinion}
	{Person.majorType == person, Person.minorType == pronoun}
  {OtherPerson.majorType == family}
	({Lookup3.majorType == umls, Lookup3.minorType == OtherDisease, 
    Lookup3.Experiencer == Other}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal3");
},
:umls.Lookup3ExpChange = {rule = ExperienceReversal3}

/* example: no febrile seizures and no family history of epilepsy - experiencer is a patient but GATE gives "other" so we revers it */

Rule: ExperiencerReversal4

(
  ({!OtherPerson.majorType == family})
  ({!Lookup2})
	({Lookup3.majorType == umls, Lookup3.minorType == OtherDisease, 
    Lookup3.Experiencer == Other}):umls
    {Conj.majorType == grammar}
    {OtherPerson.majorType == family}
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal4");
  },
:umls.Lookup3ExpChange = {rule = ExperienceReversal4}

  Rule: ExperiencerReversal5  /*from her father in childchood and she has a history of depression - assignig sufferes to patient not father*/

(
  {Person.minorType == pronoun}
  {OtherPerson.majorType == family}
  ({Lookup2.majorType == person})?
  ({Conj})?
  ({Person})
  ({Person})?
  {Lookup2.majorType == historic}
	({Lookup3.majorType == umls, Lookup3.minorType == OtherDisease, 
    Lookup3.Experiencer == Other}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal5");
},
:umls.Lookup3ExpChange = {rule = ExperienceReversal5}

Rule: ExperiencerReversal6  /*explain to Patient and his father that the ongoing episodes are non-epileptic*/
( 
  ({Person})
  ({Conj})
  {Person.minorType == pronoun}
  {OtherPerson.majorType == family}
  ({Lookup2.minorType == opinion})
	({Lookup3.majorType == umls, Lookup3.minorType == OtherDisease, 
    Lookup3.Experiencer == Other}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal6a");
},
:umls.Lookup3ExpChange = {rule = ExperienceReversal6a}

Rule: ExperiencerReversal6b  /*he also has Lookup3 and his brother told me...*/
( 
  ({Person.type == subject})
  ({Conj})?
  {Person.minorType == pronoun}
  ({Lookup2.majorType == historic})?
	({Lookup3.minorType == OtherDisease, Lookup3.Experiencer == Other}):umls
 
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal6a");
},
:umls.Lookup3ExpChange = {rule = ExperienceReversal6b}

Rule: ExperiencerReversal7  /*reversing from other to patient : he lives with his ...and has no recellection of his seizures*/

 (
  {Person.type == subject}
  {Conj}
  {Person.type == possessive}
  {OtherPerson.majorType == family}
  ({Conj})
  {Lookup2.majorType == historic}
  {Person.type == possessive}
	({Lookup3.majorType == umls, Lookup3.Experiencer == Other}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule2","ExperienceReversal7");
},
:umls.Lookup3ExpChange = {rule = ExperienceReversal7}

Rule: ExperiencerReversal8  /*reversing from other to patient for both lookup and Lookup*/

 (
  {OtherPerson}
 ({Lookup2})?
 {Person.type == possessive}
  ({Lookup.majorType == umls, Lookup.minorType == Disease, Lookup.Experiencer == Other}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal8");
},
:umls.LookupExpChange = {rule = ExperienceReversal8}

Rule: ExperiencerReversal9  /*reversing from patient to other*/

 (
  {Person.minorType == pronoun}
  ({Lookup2})?
  {OtherPerson.majorType == family}
  ({Conj})?
  {Lookup2.majorType == historic, Lookup2.type == past}
  ({Lookup2})?
  ({Lookup2})?
	({Lookup3.majorType == umls, Lookup3.minorType == OtherDisease, 
    Lookup3.Experiencer == Patient}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Other");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal9");
},
:umls.Lookup3ExpChange = {rule = ExperienceReversal9}

// Epilpesy as a CHILD - was experiencer = other, should be patient

Rule: ExperiencerReversal10  /*reversing from other to patient*/

 (
  ({Lookup contains OtherPerson}):umls
  ):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Experiencer","Patient");
  umlsAnnots.iterator().next().getFeatures().put("rule","ExperienceReversal10");
},
:umls.LookupExpChange = {rule = ExperienceReversal9, type = "OtherToPatient"}