Phase: TimeSinceDiagnosis
Input: Lookup Person Sentence Numeric TimeSince timePeriod timeElapsed Lookup2 Split DiagnosisTriggers OnsetBlock

Options: control=appelt

Rule: TimeSinceDiagnosis1
Priority: 99

(   
    {Person}
	({Lookup2.language == onset})?
    {DiagnosisTriggers.majorType == diagnosis}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed}):item
	{timeElapsed}
	{Numeric} 
    {timePeriod}
	
 ):match  
 -->
:item.WhenDiagnosed = {rule = TimeSinceDiagnosis1 , OnsetType = "time_since_diagnosis",
// PREF = :item.Lookup.PREF,  TUI = :item.Lookup.TUI,
// STY = :item.Lookup.STY,  Experiencer = :item.Lookup.Experiencer,
Certainty = :item.Lookup.Certainty, CUI = :item.Lookup.CUI, Negation = :item.Lookup.Negation,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value}

Rule: TimeSinceDiagnosis2
Priority: 99

(   
    {Person}
	{Lookup2.majorType == historic}
    {DiagnosisTriggers.majorType == diagnosis}
	{Numeric}
	{timePeriod}
	{timeElapsed}
	({Lookup2.minorType == causality})?
	({Lookup.majorType == umls , Lookup.Negation == Affirmed}):item
	
	
 ):match  
 -->
:item.WhenDiagnosed = {rule = TimeSinceDiagnosis2 , OnsetType = "time_since_diagnosis",
// PREF = :item.Lookup.PREF,  TUI = :item.Lookup.TUI,
// STY = :item.Lookup.STY,  Experiencer = :item.Lookup.Experiencer,
Certainty = :item.Lookup.Certainty, CUI = :item.Lookup.CUI, Negation = :item.Lookup.Negation,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value}


Rule: TimeSinceDiagnosis3
Priority: 99

(   
    {Person}
	({Lookup2.majorType == historic})
    {DiagnosisTriggers.majorType == diagnosis}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed}):item
	{TimeSince}
	
 ):match  
 -->
:item.WhenDiagnosed = {rule = TimeSinceDiagnosis , OnsetType = "time_since_diagnosis",
PREF = :item.Lookup.PREF,  TUI = :item.Lookup.TUI,
// STY = :item.Lookup.STY,  Experiencer = :item.Lookup.Experiencer,
Certainty = :item.Lookup.Certainty, CUI = :item.Lookup.CUI, Negation = :item.Lookup.Negation,
TimePeriod = :match.TimeSince.TimePeriod,
NumberOfTimePeriods =:match.TimeSince.NumberOfTimePeriods}

