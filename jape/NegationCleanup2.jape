Imports: {import static gate.Utils.*; }

Phase: NegationCleanUp2
Input: Verbs Trigger Lookup Sentence Lookup3
Options: control=all

// Need to see an example of this rule
// 'If this is "not"(trigger) successful then I would "consider"(verb) 
// preventative treatment such as propranolol or possibly tompiramate given his "epilepsy" (lookup)'
// Why isn't there a Lookup3 version?
// What about a rule like Person Verb Lookup.negation = negated -> flip the negation, but with controls for only on one sentence (split)
Rule: reverseNegation
(
{Trigger}
({Verbs})[1,3]
({Lookup.Negation =="Negated"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegation2a");
},
:match.LookupNegChange = {rule = reverseNegation2a}

// Above rule for lookup3 also.. 
/* Rule: reverseNegation
(
{Trigger}
({Verbs})[1,3]
({Lookup3.Negation =="Negated"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegation2a");
},
:match.Lookup3NegChange = {rule = reverseNegation2a}*/



// This might be better to remove the "non" trigger - mentioned more in NegationCleanUp.jape
// this the regex is wrong on the LHS here - needs % after the non??
Rule: reverseNegation
(
{Lookup3.PREF =~ non, Lookup3.Negation == Affirmed }
({Lookup3.Negation =="Negated"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegation2b");
},
:match.Lookup3NegChange = {rule = reverseNegation2b}

// This might be better to remove the "non" trigger - mentioned more in NegationCleanUp.jape
Rule: reverseNegation
(
{Lookup3.PREF =~ non, Lookup3.Negation == Affirmed }
{Lookup3}
({Lookup3.Negation =="Negated"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegation2c");
},
:match.Lookup3NegChange = {rule = reverseNegation2c}


