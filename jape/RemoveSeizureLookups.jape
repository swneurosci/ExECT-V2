Phase: RemoveSeizureLookups
Input: Lookup3 Token Lookup2 DiagnosisTriggers

Options: contral=all

//removes seizure mentions from Lookup3 = generic,  if followed by certain tokens
//It is also used to remove Otherdiseases if the context means a service and not a diagnosis //
// THIS IS GOOD CLEAN UP BY THE LOOK OF IT

Rule: RemoveSeizure
 (
     ({Lookup3.minorType == generic}):umls
     ({Token.string == free}|{Token.string == clinic}|{Token.string == control}|{Token.string == frequency}|{Token.string == types}|{Token.string == markers})
 
):matches
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = RemoveSeizure1}

Rule: RemoveSeizure
 (
     ({Lookup3.minorType == Disease}):umls
     ({Token.string =~ Type}|{Token.string =~ marker})
 
):matches
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = RemoveSeizure2}


Rule: RemoveSeizure
 (
     ({Lookup3.minorType == OtherDisease}):umls
     ({Token.string =~ team}|{Token.string =~ service}|{Token.string =~ Service})
 

):matches
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = RemoveSeizure3}


Rule: RemoveLookup3Within  /*when disease is the same as title such as Ms*/

(
  ({Lookup3 within {Person.ruleFinal == PersonFinal}}):umls
):match
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = RemoveSeizure4}


Rule: RemoveLookup3Within  /*Removes  generic lookup3 e.g. convulsion when it is within Lookup3 e.g.Febrile Convulsion*/


(
  ({Lookup3 within {Lookup3.minorType == OtherDisease}, Lookup3.minorType == generic}):umls
):match
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = RemoveLookup3Within1}



Rule: RemoveLookup3Within  /*Removes  generic lookup3 when it's within health term e.g fit and well*/

(
  ({Lookup3 within {Lookup2.majorType == health_condition}, Lookup3.minorType == generic}):umls
):match
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = RemoveLookup3Within2}

Rule: RemoveLookup3Within  /*Removes generic lookup3 when it's within Diagnosis trigger Seizure type*/

(
  ({Lookup3 within {DiagnosisTriggers}, Lookup3.minorType == generic}):umls
):match
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = RemoveLookup3Within3}

