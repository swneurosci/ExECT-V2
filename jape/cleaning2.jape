Imports: {import static gate.Utils.*; }

Phase: Cleaning
Input:Lookup Lookup3 Address Location Token Person NounChunk Lookup2 MedicalHistory Sentence NewLine InvestigationFindingEEG
Options: control=appelt

// SHOULD BE SAME AS cleaning.jape, but with lookup3 not lookup

// These should address lookup3 that contain comorbidities - stroke, head injury, Deal with diseases that are part of URLs
// e.g. www.diabetes-uk.org
// TUI == T047 - Disease or Syndrome, TUI == T191 - Neoplastic Process, TUI == T184 -  Sign or Symptom   TUI == T019 - Congenital Abnormality
// TUI == T037 - Injury or Poisoning, TUI == T048 - Mental or Behavioral Dysfunction,  TUI == T061 - Therapeutic or Preventive Procedure, TUI == T033 - finding


Rule: url1

(
  {Lookup3.majorType == umls, Lookup3 within {Address.kind == url}}
):umls

-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = url1}


// Remove Lookup3 that are preceded of proceded by a generic healthcare terms i.e. Clinic

 
Rule: cleanHealthCareTerms
(
  ({Lookup3.TUI == "T184"} | {Lookup3.TUI == "T047"} | {Lookup3.TUI == "T037"} |{Lookup3.TUI == "T191"} |{Lookup3.TUI == "T048"} |{Lookup3.TUI == "T061"}|{Lookup3.TUI == "T033"} |{Lookup3.TUI == "T019"})
  ({Lookup2.majorType == organization} | {Location})
):umls
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = cleanHealthCareTerms}

// Remove Lookups that are preceded of proceded by a generic healthcare terms i.e. Clinic
Rule: cleanHealthCareTerms
(
   ({Lookup2.majorType == organization} | {Location})
   ({Lookup3.TUI == "T184"} | {Lookup3.TUI == "T047"} | {Lookup3.TUI == "T037"} |{Lookup3.TUI == "T191"} |{Lookup3.TUI == "T048"} |{Lookup3.TUI == "T061"}|{Lookup3.TUI == "T033"} |{Lookup3.TUI == "T019"})
   
):umls
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = cleanHealthCareTerms}


Rule: cleanHealthCareTerms
(
   ({Lookup2.majorType == organization} | {Location})
   ({Lookup3.TUI == "T184"} | {Lookup3.TUI == "T047"} | {Lookup3.TUI == "T037"} |{Lookup3.TUI == "T191"} |{Lookup3.TUI == "T048"} |{Lookup3.TUI == "T061"}|{Lookup3.TUI == "T033"} |{Lookup3.TUI == "T019"})
   
):umls
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = cleanHealthCareTerms}


// Remove Lookups that are preceded of proceded by a generic healthcare terms i.e. Clinic
// Should be Lookup2.majorType (changed from lookup)


Rule: cleanHealthCareTermsWithin
(
   ({Lookup3 within Lookup3.majorType == organization})
   {Lookup3.minorType == generic,  Lookup3 within {Lookup3.minorType == OtherDisease}}
):umls
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = cleanHealthCareTermsWithin}



Rule: cleanLookup2

(
   ({Lookup2 within MedicalHistory.majorType == diagnosis})
):umls
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup2Deleted = {rule = cleanLookup2a}

//removes things like age group in Lookup2 if the term is contained in a health term, i.e. Child Health
Rule: cleanLookup2

(
   {Lookup2.minorType == time, Lookup2 within {Lookup2.minorType == health_term}}
):umls
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup2Deleted = {rule = cleanLookup2b}

//This rule removes generic seizures in Lookup3 when they are part of epileptic seizure in lookup//
//e.g., temporal onset lobe seizures - so seizures on their own will not be annotated in Lookup3.minorType == generic//

Rule: cleanLookup3gen

(
   {Lookup3.minorType == generic,  Lookup3 within {Lookup.minorType == Disease}}
):umls
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = cleanLookup3gen}



// remove lookups when within a health care term (seizure clinic)
Rule: cleanHealthCareTerms3

(
   {Lookup3.minorType == generic,  Lookup3 within {Lookup2.minorType == health_term}}
):umls
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = cleanHealthCareTerms3}

// Dont have lookup2.minorType = health_condition  // we have in the 'to be reviewd list' at the moment
// removes fit if it in the context of he is fit and well 
Rule: RemoveLookupWithin

(
   {Lookup3.minorType == generic,  Lookup3 within {Lookup2.minorType == health_condition}}
):umls
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = RemoveLookupWithin}

//removes ms. name as MS disease 

Rule: RemoveLookup3

(
   {Lookup3.minorType == OtherDisease,  Lookup3 within {Person}}
):umls
-->
:umls { 
  inputAS.removeAll(umlsAnnots);
},
:umls.Lookup3Deleted = {rule = RemoveLookupWithin}





