Phase: PatientHistC
Input: Person Lookup2 Lookup3  PHistBlock timeElapsed DiagnosisTriggers Sentence PartialDate Numeric timePeriod
Options: control=appelt


/*  Additional PtHistory These rules annotate events in patient history - type of event with an UMLS CUI, age (precise and as a range), 
date as year/month, and time since the event, as TimePeriod / NumberOfTimePeriods) And this should be the 3rd event within sentence
*/


Rule: PtHistoryC1
Priority: 100

(   
	{Person}
    {Lookup2.majorType == historic}
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, Lookup3.Experiencer == Patient}|
    {Lookup3.majorType == umls, Lookup3.minorType == generic,Lookup3.Experiencer == Patient, Lookup3.Negation == Affirmed }):item
    {Person}
    {Lookup2.majorType == historic}
    {timeElapsed.time == in}
    {Person.minorType == pronoun}
    ({Lookup2.minorType == time}):a


):match  
 -->
:item.PatientHistory = {rule = PtHistoryC1, PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty,
YearDate = "",
MonthDate = "",
Age = "",
AgeUnit = :a.Lookup2.timeUnit,
AgeLower =:a.Lookup2.lowerAge,
AgeUpper =:a.Lookup2.upperAge,
TimePeriod = "",
NumberOfTimePeriods = "",
PointInTime = ""} 


/*Rule: PtHistoryC1a
Priority: 90

(   
	{Numeric}
	{timePeriod}
	({timeElapsed.time == since})?
	{Person}
	({Lookup2})
    {Lookup2.majorType == historic , Lookup2.minorType == symptoms , Lookup2.language == onset}
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, Lookup3.Experiencer == Patient}|
	{Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Experiencer == Patient, Lookup3.Negation == Affirmed }):item
    
 ):match  
 -->
:item.PatientHistory = {rule = PtHistoryC1a, PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty, YearDate = "",
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value} */

Rule: PtHistoryC2
Priority: 100

(   
	{Person}
    {Lookup2.type == has}
    {Lookup2.type == suffered}
    {timeElapsed}
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, 
	Lookup3.Experiencer == Patient}):item
   
 ):match  
 -->
:item.PatientHistory = {rule = PtHistoryC2, PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty}


Rule: PtHistoryC3
Priority: 80

(   
	{Person}
    {Lookup2.type == has}
    {Lookup2.type == suffered}
    {timeElapsed}
    {Lookup3}
    ({timeElapsed})
	({Numeric})*
    ({Lookup3})?
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, 
	Lookup3.Experiencer == Patient}):item
   

 ):match  
 -->
:item.PatientHistory = {rule = PtHistoryC3, PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty}

/*Rule: PtHistoryC4
Priority: 80

(   
	{Person}
    {Lookup2}
    ({Lookup3})?
    {Lookup2.minorType == causality}
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, 
	Lookup3.Experiencer == Patient}):item

 ):match  
 -->
:item.PatientHistory = {rule = PtHistoryC4, PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty}*/

Rule: PtHistoryC5
Priority: 80

(   
	{Person}
    {Lookup2.type == suffered}
    ({Lookup2})?
    ({Person})?
    {timeElapsed.time == since}
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, 
	Lookup3.Experiencer == Patient}):item
    {timeElapsed.time == in}
    {Numeric}

 ):match  
 -->
:item.PatientHistory = {rule = PtHistoryC5, PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty,
YearDate =:match.Numeric.value}


/*Rule: PtHistoryC8
Priority: 90

(    
   {Lookup2.minorType == opinion}
   ({Lookup2.majorType == historic})
    ({Person})?
    {Lookup2.type  == past}
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, Lookup3.Experiencer == Patient}|
    {Lookup3.majorType == umls, Lookup3.minorType == generic,Lookup3.Experiencer == Patient, Lookup3.Negation == Affirmed }):item
   

):match  
 -->
:item.PatientHistory = {rule = PtHistoryC8, PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = "Past", 
Certainty = :item.Lookup3.Certainty} */

/*Rule: PtHistoryC9
Priority: 90

(    
   {Person}
   ({Lookup2})?
   ({Lookup2.majorType == historic})  
   ({Lookup3})?
   ({timeElapsed})?
    ({Lookup2.type  == began})?
    ({Lookup2.minorType == probability})
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, Lookup3.Experiencer == Patient}|
    {Lookup3.majorType == umls, Lookup3.minorType == generic,Lookup3.Experiencer == Patient, Lookup3.Negation == Affirmed }):item
   

):match  
 -->
:item.PatientHistory = {rule = PtHistoryC9, PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = "Past", 
Certainty = :item.Lookup3.Certainty} */

