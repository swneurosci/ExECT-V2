Phase: PatientHistC
Input: Person OtherDiag Lookup2 Lookup3 timeElapsed Age DiagnosisTriggers Sentence PartialDate Numeric timePeriod
Options: control=appelt


/*  Additional PtHistory These rules annotate events in patient history - type of event with an UMLS CUI, age (precise and as a range), 
date as year/month, and time since the event, as TimePeriod / NumberOfTimePeriods) And this should be the 3rd event within sentence
*/

// why empty inputs

Rule: PtHistoryC1
Priority: 100

(   
	{Person}
    {Lookup2.majorType == historic}
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, Lookup3.Experiencer == Patient}|
    {Lookup3.majorType == umls, Lookup3.minorType == generic,Lookup3.Experiencer == Patient, Lookup3.Negation == Affirmed }):item
    {Person}
    {Lookup2.majorType == historic}
    {timeElapsed.time == In}
    {Person.minorType == pronoun}
    ({Lookup2.minorType == time}):a


):match  
 -->
:item.PatientHistory = {rule = PtHistoryC1, //PREF = :item.OtherDiag.PREF,
// STY = :item.OtherDiag.STY, 
// Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, CUI = :item.OtherDiag.CUI, 
Negation = :item.OtherDiag.Negation,
YearDate = "",
MonthDate = "",
Age = "",
AgeUnit = :a.Lookup2.timeUnit,
AgeLower =:a.Lookup2.lowerAge,
AgeUpper =:a.Lookup2.upperAge,
TimePeriod = "",
NumberOfTimePeriods = "",
PointInTime = ""} 



Rule: PtHistoryC2
Priority: 100

(   
	{Person}
    {Lookup2.type == has}
    {Lookup2.type == suffered}
    {timeElapsed}
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, 
	Lookup3.Experiencer == Patient}):item
   
 ):match  
 -->
:item.PatientHistory = {rule = PtHistoryC2,//PREF = :item.OtherDiag.PREF,
// STY = :item.OtherDiag.STY, 
// Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, CUI = :item.OtherDiag.CUI, 
Negation = :item.OtherDiag.Negation}


Rule: PtHistoryC3
Priority: 80

(   
	{Person}
    {Lookup2.type == has}
    {Lookup2.type == suffered}
    {timeElapsed}
    {Lookup3}
    ({timeElapsed})
	({Numeric})*
    ({Lookup3})?
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, 
	Lookup3.Experiencer == Patient}):item
   

 ):match  
 -->
:item.PatientHistory = {rule = PtHistoryC3,//PREF = :item.OtherDiag.PREF,
// STY = :item.OtherDiag.STY, 
// Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, CUI = :item.OtherDiag.CUI, 
Negation = :item.OtherDiag.Negation}



Rule: PtHistoryC4
Priority: 80

(   
	{Person}
    {Lookup2.type == suffered}
    ({Lookup2})?
    ({Person})?
    {timeElapsed.time == Since}
	({Lookup3.minorType == OtherDisease, Lookup3.Negation == Affirmed, Lookup3.majorType == umls, 
	Lookup3.Experiencer == Patient}):item
    {timeElapsed.time == In}
    {Numeric}

 ):match  
 -->
:item.PatientHistory = {rule = PtHistoryC4,//PREF = :item.OtherDiag.PREF,
// STY = :item.OtherDiag.STY, 
// Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, CUI = :item.OtherDiag.CUI, 
Negation = :item.OtherDiag.Negation,
YearDate =:match.Numeric.value}

Rule: PtHistoryC5
Priority: 100

(   
	{Person}
	{OtherDiag}
	({Lookup2})?
	({Age}):a
	({Person})?
    ({timeElapsed})?
	({Person})
	({Lookup2.type == suffered})
    ({OtherDiag})
    ({Lookup2})?
	({OtherDiag}):item
		   
 ):match  
 -->
:item.PatientHistory = {rule = PtHistoryC5, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
//STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
//Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, 
AgeUnit = :a.Age.Unit,
Age =:a.Age.Age,
AgeLower =:a.Age.AgeLower,
AgeUpper =:a.Age.AgeUpper}


