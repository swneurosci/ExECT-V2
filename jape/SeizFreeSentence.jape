Phase: SeizureFrequency
Input: SeizureFrequencyDriving Split but
Options: control=all

Rule: SFreeSentence
(
    ({Split}|{but})
    ({SeizureFrequencyDriving})?
    ({SeizureFrequencyDriving}):match
    ({SeizureFrequencyDriving})?
    ({Split}|{but})
):match1
-->
:match1.SFreeSentence = { rule2 = "SFreeSentence", rule = :match.SeizureFrequencyDriving.rule, CUI = :match.SeizureFrequencyDriving.CUI, TimePeriod = :match.SeizureFrequencyDriving.TimePeriod,
NumberOfTimePeriods = :match.SeizureFrequencyDriving.NumberOfTimePeriods, NumberOfSeizures  = :match.SeizureFrequencyDriving.NumberOfSeizures ,
LowerNumberOfSeizures  = :match.SeizureFrequencyDriving.LowerNumberOfSeizures, UpperNumberOfSeizures  = :match.SeizureFrequencyDriving.UpperNumberOfSeizures,
YearDate = :match.SeizureFrequencyDriving.YearDate, DayDate = :match.SeizureFrequencyDriving.DayDate, MonthDate = :match.SeizureFrequencyDriving.MonthDate,
SinceOrDuration = :match.SeizureFrequencyDriving.SinceOrDuration, Certainty = :match.SeizureFrequencyDriving.Certainty, Negation = :match.SeizureFrequencyDriving.Negation,
AgeUnit = :match.SeizureFrequencyDriving.AgeUnit, Age = :match.SeizureFrequencyDriving.Age, AgeLower = :match.SeizureFrequencyDriving.AgeLower, AgeUpper = :match.SeizureFrequencyDriving.AgeUpper,
PointInTime = :match.SeizureFrequencyDriving.PointInTime, LowerNumberOfTimePeriods = :match.SeizureFrequencyDriving.LowerNumberOfTimePeriods, UpperNumberOfTimePeriods = :match.SeizureFrequencyDriving.UpperNumberOfTimePeriods}
