Phase: BirthHistoryB
Input: Lookup3 Lookup2 Person  Sentence DiagnosisTriggers 

Options: control=appelt

/*these rule are to capture birth injuries and other events in the perinatal period*/

Rule: BirthB1
Priority: 100

(
    {Person}
    {Lookup2.majorType == historic}
    ({Lookup2.type  == time})?
    ({Lookup3.TUI == "T058" , Lookup3.Experiencer == Patient , Lookup3.Negation == Affirmed}):item
   

):match  
 -->
:item.BirthHistory = {rule = BirthB1,  PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty}

Rule: BirthB2
Priority: 100

(
    {Person}
    {Lookup2.majorType == historic}
    ({Lookup2.type  == time})?
    ({Lookup3.PREF =~ "Birth" , Lookup3.Experiencer == Patient , Lookup3.Negation == Affirmed}):item
   

):match  
 -->
:item.BirthHistory = {rule = BirthB2,  PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty}


Rule: BirthB3
Priority: 100

(
    {DiagnosisTriggers} 
    ({Lookup3})?
    ({Lookup2})?
    ({Lookup2})?
    ({Lookup3.PREF =~ "[Bb]irth" , Lookup3.Experiencer == Patient , Lookup3.Negation == Affirmed}):item
   

):match  
 -->
:item.BirthHistory = {rule = BirthB3,  PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty}

Rule: BirthB4
Priority: 100

(
    {Person}
    {Lookup2.type == has}
    {Lookup3}
    {Lookup2.minorType == causality}
    ({Lookup3.PREF =~ "[Bb]irth" , Lookup3.Experiencer == Patient , Lookup3.Negation == Affirmed}):item
   

):match  
 -->
:item.BirthHistory = {rule = BirthB4,  PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty}


Rule: BirthB5
Priority: 100

(
    
    {Lookup2.language == onset, Lookup2.type == diagnosed}
    ({Lookup2})?
    ({Lookup3.PREF =~ "[Bb]irth" , Lookup3.Experiencer == Patient , Lookup3.Negation == Affirmed}):item
   

):match  
 -->
:item.BirthHistory = {rule = BirthB5,  PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty}

Rule: BirthB6
Priority: 100

(
    
    {Person}
    ({Lookup2})?
    ({Lookup2})?
    ({Lookup3.PREF =~ "[Bb]irth" , Lookup3.Experiencer == Patient , Lookup3.Negation == Affirmed}):item
   

):match  
 -->
:item.BirthHistory = {rule = BirthB6,  PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty}

Rule: BirthB6a
Priority: 100

(
    
    ({Lookup2.minorType == opinion})
    ({Lookup2})?
    ({Lookup2})?
    ({Lookup3.PREF =~ "[Bb]irth" , Lookup3.Experiencer == Patient , Lookup3.Negation == Affirmed}):item
   

):match  
 -->
:item.BirthHistory = {rule = BirthB6a,  PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality, 
Certainty = :item.Lookup3.Certainty}

Rule: BirthB7  //Normal birth//
Priority: 100

(
    
    
    ({Lookup3.CUI == C3665337 , Lookup3.Negation == Affirmed}):item
   

):match  
 -->
:item.BirthHistory = {rule = BirthB7,  PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, 
STY = :item.Lookup3.STY, Negation = :item.Lookup3.Negation,
Experiencer = :item.Lookup3.Experiencer, Temporality = :item.Lookup3.Temporality,
Certainty =:item.Lookup3.Certainty}