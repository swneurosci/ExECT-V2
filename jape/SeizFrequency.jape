Phase: SeizFrequency 
Input: NumberRange timePeriods Token Unit Lookup3
Options: control=appelt 
 
Rule: SeizFrequency1a 
Priority: 99 
( 
    ({NumberRange}
    {timePeriods notContains Token.string == per, timePeriods notContains Token.string == a, timePeriods notContains Token.string == every, timePeriods notContains Token.string == each}):match
    ({Token.string != ago})  
):match1 
--> 
:match.SeizFrequency1 = {Rule = SeizFrequency1a, TimePeriod = :match.timePeriods.time-unit, 
NumberOfTimePeriods = :match.NumberRange.value, UpperNumberOfTimePeriods = :match.NumberRange.N2, LowerNumberOfTimePeriods = :match.NumberRange.N1} 


Rule: SeizFrequency2b 
Priority: 100 
( 
    (({NumberRange}):num
    ({timePeriods contains Token.string == per}|{timePeriods contains Token.string == a}|{timePeriods contains Token.string == every}|{timePeriods contains Token.string == each})):match
    ({Token.string != ago})  
):match1 
--> 
:match.SeizFrequency2 = {Rule = SeizFrequency2b, TimePeriod = :match.timePeriods.time-unit, 
NumberOfTimePeriods = :match.timePeriods.frequency, QuantityTotal = :num.NumberRange.value, 
QuantityLowerRange = :num.NumberRange.N1, QuantityUpperRange = :num.NumberRange.N2}

Rule: SeizFrequency2a 
Priority: 100 
( 
    (({NumberRange}) 
    ({Token, !Unit, !Lookup3}) 
    ({timePeriods})):match
):match1 
--> 
:match.SeizFrequency2 = {Rule = SeizFrequency2a, TimePeriod = :match.timePeriods.time-unit, 
NumberOfTimePeriods = :match.timePeriods.frequency, QuantityTotal = :match.NumberRange.value, 
QuantityLowerRange = :match.NumberRange.N1, QuantityUpperRange = :match.NumberRange.N2}



Rule: SeizFrequency1b 
Priority: 98
(   
    ({timePeriods}):match
    ({Token.string != ago})  
):match1 
--> 
:match.SeizFrequency1 = {Rule = SeizFrequency1b, TimePeriod = :match.timePeriods.time-unit, 
NumberOfTimePeriods = :match.timePeriods.frequency} 
 