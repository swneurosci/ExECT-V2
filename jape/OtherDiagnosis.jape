Phase: OtherDiagnosis
Input:  DiagnosisTriggers Sentence OtherDiag listPoint Lookup2 

/* These are to capture OtherDiag when it is given in a sentence within the body of the letter, 1st in a sentence if ther is more than one, 
listPoint should prevent these rules from capturing diagnosis within lists at top of letter*/

Options: control=appelt

Rule: OtherDiagnosis1
Priority: 100

(   
	
	{DiagnosisTriggers}
	({Lookup2})?
	({Lookup2})?
	({OtherDiag.rule == OtherDiagDate}):item
	
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagnosis1, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty,
DayDate = :item.OtherDiag.DayDate,
MonthDate =:match.OtherDiag.MonthDate,
YearDate = :match.OtherDiag.YearDate}

Rule: OtherDiagnosis2
Priority: 100

(   
	{Lookup2.minorType == probability}
	{DiagnosisTriggers}
	({Lookup2})?
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagnosis2, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty}

Rule: OtherDiagnosis3  /*when the top of letter diagnosis has no listpoints and just one item*/
Priority: 99

(   
	{!Lookup2}
	{DiagnosisTriggers.majorType == diagnosis, DiagnosisTriggers.type == diagnosis}
	({Lookup2.minorType == probability})
	({OtherDiag}):item
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagnosis3, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty}
/*
Rule: OtherDiagnosis4
Priority: 99

(   
	{DiagnosisTriggers.majorType == diagnosis, DiagnosisTriggers.type == diagnosis}
	({OtherDiag})?
	({OtherDiag}):item
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagnosis4, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty}*/

/*triggered by opinion only,   " the impression is thet the ongoing episodes are..."*/

/*Rule: OtherDiagnosis5
Priority: 99

(  
 	{Lookup2.minorType == opinion, Lookup2.majorType == diagnosis}
	{Lookup2.minorType == opinion, Lookup2.majorType == diagnosis}
	({OtherDiag}):item
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagnosis5, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty}*/ 


Rule: OtherDiagnosis6  /*as in non-epileptic attacks would seem a most likely explanation*/
Priority: 90

(  
	({!Lookup2})
 	({OtherDiag}):item
	({Lookup2.minorType == opinion})
	({Lookup2.minorType == opinion})
	
	
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagnosis6, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty}



Rule: OtherDiagnosis7 //with an opinion//
Priority: 100

(   
	{Lookup2.minorType == opinion}
	{DiagnosisTriggers}
	({OtherDiag.rule == OtherDiagPhrase}):item
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagnosis7, PREF = :item.OtherDiag.PREF, CUI = :item.OtherDiag.CUI, 
STY = :item.OtherDiag.STY, Negation = :item.OtherDiag.Negation,
Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty}