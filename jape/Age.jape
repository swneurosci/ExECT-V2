Phase: Age
Input: age Numeric YearToMonths timePeriod Lookup2 Person Split timeElapsed Range Sentence YearToMonths Token
Options: control=appelt
//Token is her to exclude picking up PostCode and other word-number combinations//




Rule: Age1a   
Priority: 80

(   
	{age}
	{Numeric}
	{timePeriod}
	
 ):match  
 -->
:match.Age = {rule =Age1a, AgeUnit = :match.timePeriod.time-unit,
Age =:match.Numeric.value}
 	
Rule: Age1b
Priority: 100

(   
	{Numeric}
    {timePeriod}
	{age}
	
 ):match  
 -->
:match.Age = {rule =Age1b, AgeUnit = :match.timePeriod.time-unit,
Age =:match.Numeric.value}  


Rule: Age1c   
Priority: 80

(   
	{age.AgeUnit ==Year}
	{Numeric}
	
 ):match  
 -->
:match.Age = {rule =Age1c, AgeUnit = :match.age.AgeUnit,
Age =:match.Numeric.value}
 	
Rule: Age1d
Priority: 100

(   
	{Numeric}
	{age.AgeUnit == Year}
	
 ):match  
 -->
:match.Age = {rule =Age1d, AgeUnit = :match.age.AgeUnit,
Age =:match.Numeric.value}  

Rule: Age_since1
Priority: 99

(   
    {timeElapsed}
	{age.value == aged}
	{Numeric}
	{timePeriod}
		
 ):match  
 -->
:match.Age = {rule =Age_since1, AgeUnit = :match.timePeriod.time-unit,
Age =:match.Numeric.value}  


Rule: Age_since2
Priority:60

(   
    {timeElapsed}
	{age.value == aged}
	{Numeric}
	
 ):match  
 -->
:match.Age = {rule =Age_since2, AgeUnit = "Year",
Age =:match.Numeric.value}  


Rule: Age_since3
Priority:60

(   
    ({timeElapsed})?
	{Person}
	{Token.string == was}
	{Numeric}
	
 ):match  
 -->
:match.Age = {rule =Age_since3, AgeUnit = "Year",
Age =:match.Numeric.value}  


   Rule: Age2
Priority: 90

(   
	{age.value == aged}
	{Numeric}	
	
 ):match  
 -->
:match.Age = {rule =Age2, AgeUnit = "Year",
Age =:match.Numeric.value}  

/*the first two rule in AgeRange are for the " by the age of x" where only the upper age is givem*/
 Rule: Age_Range1
Priority: 90

(   
	{age.value == topAge}
	{Numeric}
	{timePeriod}
	
 ):match  
 -->
:match.Age = {rule =Age_Range1, AgeUpper =:match.Numeric.value, AgeLower =:match.Lookup2.lowerAge,
AgeUnit =:match.timePeriod.time-unit}  

  Rule: Age_Range1b
Priority: 90

(   
	{age.value == topAge}
	{Numeric}	
	
 ):match  
 -->
:match.Age = {rule =Age_Range1b, AgeUpper =:match.Numeric.value, AgeLower =:match.Lookup2.lowerAge,
AgeUnit = "Year"}  


//when a numeric age is followed by a less precise lookup2 age group i.e. 12 year old eenager
//the numeric value of age should be picked up
 Rule: Age_Range2a
Priority: 100

(   
	({timeElapsed})?
	({Numeric}
	{timePeriod}
	{age}
	{Lookup2.minorType == time}):item
	
 ):match  
 -->
:match.Age = {rule =Age_Range2a,Age =:item.Numeric.value}  


/*lookup2.minorType == time captures age groups e.g. teenager , timeElapsed is not always used in such phrases*/

/* THIS RULE PICKS UP TOO MUCH - NEEDS TO BE MORE SPECIFIC */
 Rule: Age_Range2b
Priority: 90

(   
	({Token.string == a})
	{Lookup2.minorType == time}	
	
 ):match  
 -->
:match.Age = {rule =Age_Range2b, AgeLower =:match.Lookup2.lowerAge,
AgeUpper = :match.Lookup2.upperAge, AgeUnit = :match.Lookup2.timeUnit}  

Rule: Age_Range2c
Priority: 90

(   
	({timeElapsed})
	{Lookup2.minorType == time}	
	
 ):match  
 -->
:match.Age = {rule =Age_Range2c, AgeLower =:match.Lookup2.lowerAge,
AgeUpper = :match.Lookup2.upperAge, AgeUnit = :match.Lookup2.timeUnit}  



Rule: Age_Range3
Priority: 90

(   
	{age}
	{Range}	
	({timePeriod})
 ):match  
 -->
:match.Age = {rule =Age_Range3, AgeLower =:match.Range.N1,
AgeUpper = :match.Range.N2, AgeUnit =:match.timePeriod.time-unit} 

Rule: Age_Range3a
Priority: 90

(  ({Token.string == between})
	({Token.string == the})?
	{age}
	({Numeric}):N1
	({Token.string == and})
	({Numeric}):N2
	({timePeriod})
 ):match  
 -->
:match.Age = {rule =Age_Range3a, AgeLower =:N1.Numeric.value,
AgeUpper = :N2.Numeric.value, AgeUnit =:match.timePeriod.time-unit} 

Rule: Age_Range3b  /*at the age of 12 months and 30 months - but treated as range*/
Priority: 90

(   
	{age}
	({Numeric}):N1
	({timePeriod})?
	({Token.string == and})
	({Numeric}):N2
	({timePeriod}):a
 ):match  
 -->
:match.Age = {rule =Age_Range3b, AgeLower =:N1.Numeric.value,
AgeUpper = :N2.Numeric.value, AgeUnit =:a.timePeriod.time-unit} 


Rule: Age_Range4
Priority: 100

(   
	({timeElapsed})?
	{age}
	{Range}	
	
 ):match  
 -->
:match.Age = {rule =Age_Range4, AgeLower =:match.Range.N1,
AgeUpper = :match.Range.N2, AgeUnit = Year}  


Rule: Age_Range5
Priority: 100

(   
	{Person}
	({Lookup2})?
	{Lookup2.minorType == time}	
	({timePeriod})?
	
 ):match  
 -->
:match.Age = {rule =Age_Range5, AgeLower =:match.Lookup2.lowerAge,
AgeUpper = :match.Lookup2.upperAge, AgeUnit =:match.Lookup2.timeUnit}  


/*when years are converted to months if the upper age is given in months, up to 2 years*/
Rule: Age_Range6  
Priority: 100

(   
	{age}
	{YearToMonths}	
	({Token})?
	{Numeric}
	{timePeriod.time-unit == Month}
	
 ):match  
 -->
:match.Age = {rule =Age_Range6, AgeLower =:match.YearToMonths.value, AgeUnit = :match.timePeriod.time-unit,
AgeUpper =:match.Numeric.value} 
