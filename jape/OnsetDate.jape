Phase: OnsetDate
Input: Lookup3 Person Lookup2 Sentence Numeric timeElapsed  PointInTime Lookup PartialDate timePeriod Age DiagnosisTriggers age
Options: control=appelt
//Age is here to stop th e rules picking yp Age of onset//
//DiagnosisTriggers is to stop the rules from picking up diagnosis//
Rule: OnsetDate1
Priority: 100

(   
	{Person}
    ({Lookup2})?
	{Lookup2.majorType == historic, Lookup2.language == onset}
	({Lookup.majorType == umls , Lookup.Experiencer == Patient , Lookup.Negation == Affirmed}):item
	{timeElapsed.time == during}
	{PartialDate}
	
	
 ):match  
 -->
:item.Onset= {rule = OnsetDate1, OnsetType = "date_of_onset", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup3.STY, 
YearDate = :match.PartialDate.year,
MonthDate = "",
DayDate = ""} 

Rule: OnsetDate2
Priority: 98

(   
	{Person}
	({Lookup2.majorType == historic , Lookup2.language == onset})
	({Person})?
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.minorType == Disease}):item
	{timeElapsed}
	{PartialDate}
	
	
 ):match  
 -->
:item.Onset = {rule = OnsetDate2, OnsetType = "date_of_onset", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
YearDate = :match.PartialDate.year,
MonthDate =:match.PartialDate.month,
DayDate = ""}

Rule: onsetDate3
Priority: 98

(   
	{Person}
	({Numeric})?
	({Lookup2})?
	({Lookup2.majorType == historic})
	({Lookup.majorType == umls , Lookup.Experiencer == Patient , Lookup.Negation == Affirmed}):item
	({timeElapsed})?
	{PointInTime}
	
	
 ):match  
 -->
:item.Onset = {rule = OnsetDate3, OnsetType = "date_of_onset", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY,
PointInTime =:match.PointInTime.Since}

Rule: onsetDate4
Priority: 98

(   
	{Lookup2.majorType == historic}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.minorType == Disease}):item
	{Lookup2.language == onset }
	{timeElapsed}
	{PartialDate}
	
	
	
 ):match  
 -->
:item.Onset = {rule = OnsetDate4, OnsetType = "date_of_onset", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
YearDate = :match.PartialDate.year,
MonthDate ="",
DayDate = ""}

Rule: onsetDate5
Priority: 98

(   
	({Person})
	({Lookup2})
	{Lookup2.majorType == historic, Lookup2.language == onset}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.Experiencer == Patient }):item
	({Lookup2.language == onset})?
	({timeElapsed.time == in}|{timeElapsed.time == since})
	{Numeric}
	
	
	
 ):match  
 -->
:item.Onset = {rule = OnsetDate5, OnsetType = "date_of_onset", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
YearDate = :match.Numeric.value,
MonthDate ="",
DayDate = ""}


Rule: onsetDate6
Priority: 100

(   
	{Person}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.Experiencer == Patient ,Lookup.minorType == Disease }):item
	{Lookup2.language == onset}
	{timeElapsed.time == in}
	{Numeric}
		
	
 ):match  
 -->
:item.Onset = {rule = onsetDate6, OnsetType = "date_of_onset", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
YearDate = :match.Numeric.value,
MonthDate ="",
DayDate = ""}


Rule: onsetDate8
Priority: 98

(   
	{Person}
	{Lookup2.majorType == historic , Lookup2.language == onset}
	({Lookup.majorType == umls , Lookup.Experiencer == Patient , Lookup.Negation == Affirmed , Lookup.minorType == Disease }):item
	{timeElapsed}
	{Numeric}
	{timePeriod}
	{timeElapsed.time == since}
	{Person}
	{PointInTime.minorType == since}
	
	
 ):match  
 -->
:item.Onset = {rule = OnsetDate8, OnsetType = "TimeFromPointInTime", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
PointInTime =:match.PointInTime.Since,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value}


