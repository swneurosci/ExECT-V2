Phase: TimeSinceOnsetB
Input: Lookup3 Lookup Person  Numeric timePeriod timeElapsed Lookup2 Split age Frequency
//frequency is here to stop the phrases relating to frequency rather than an onset being annotated//

Options: control=appelt		

Rule: TimeSinceOnsetB1
Priority: 100

(   
	{timeElapsed.majorType == context}
	{timePeriod}
	{Person}
	{Lookup3}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.Experiencer  == Patient , Lookup.minorType == Disease  }):item
		
 ):match  
 -->
:item.Onset = {rule = TimeSinceOnsetB1, OnsetType = "time_since_episodes_started", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods ="1"}


Rule: TimeSinceOnsetB2
Priority: 100

(   
	({Lookup.majorType == umls , Lookup.Negation == Affirmed, Lookup.Experiencer  == Patient, Lookup.minorType == Disease}):item
	{Split}
	{Person}
	{Lookup2.type == has}
	{Lookup3}
	{timeElapsed.majorType == context}
	{Numeric}
	{timePeriod}
		
 ):match  
 -->
:item.Onset = {rule = TimeSinceOnsetB2, OnsetType = "time_since_episodes_started", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods = :match.Numeric.value}

Rule: TimeSinceOnsetB3
Priority: 100

(  
	{Person}
	{Lookup2.type == has }
	({Lookup.majorType == umls , Lookup.Negation == Affirmed, Lookup.Experiencer  == Patient, Lookup.minorType == Disease , Lookup.Temporality != hypothetical}):item
	{timeElapsed.majorType == context}
	{Numeric}
	{timePeriod}
			
 ):match  
 -->
:item.Onset = {rule = TimeSinceOnsetB3, OnsetType = "time_since_episodes_started", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods = :match.Numeric.value}


Rule: TimeSinceOnsetB4
Priority: 100

(  
	{Person}
	{Lookup2}
	{Lookup3}
	({Lookup2})?
	{timeElapsed.majorType == context}
	{timePeriod}
	{Numeric}
	{timePeriod}
	{Lookup2.type == suffered}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.Experiencer  == Patient ,  Lookup.minorType == Disease}):item
		
 ):match  
 -->
:item.Onset = {rule = TimeSinceOnsetB4, OnsetType = "time_since_episodes_started", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value}

Rule: TimeSinceOnsetB5
Priority: 100

(  
	{Person}
	({Lookup2})?
	{Lookup2.language == onset}
	{Lookup3.minorType == generic}
	({Lookup2})?
	{timeElapsed.majorType == context}
	{Numeric}
	{timePeriod}
	{Split}
	({Lookup2})?
	{Lookup2.type == began}
	{Person}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.Experiencer  == Patient ,  Lookup.minorType == Disease}):item
	
	
 ):match  
 -->
:item.Onset = {rule = TimeSinceOnsetB5, OnsetType = "time_since_episodes_started", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value}

Rule: TimeSinceOnsetB5
Priority: 100

(  
	{timeElapsed.majorType == context}
	{Numeric}
	{timePeriod}
	{Split}
	{Lookup2.language == onset}
	{Person}
	({Lookup2})?
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.Experiencer  == Patient ,  Lookup.minorType == Disease}):item
	
	
 ):match  
 -->
:item.Onset = {rule = TimeSinceOnsetB5, OnsetType = "time_since_episodes_started", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value}