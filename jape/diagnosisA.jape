Phase: DiagnosisA
Input:  Lookup DiagnosisTriggers NewParagraph
Options: control=all

/* 
  * Use certain Lookup.STY with diagnosis annotations 
  * e.g. (Lookup.PREF == "Diagnosis")
  * also includes nested diagnosis i.e. multiple diagnosis in a phrase
  * not filtered for epilepsy specific at this stage
*/

/* STY now != 'Sign or Symptom' to match DiagFromSeizure, this will also now pick up post-traumatic seizures */

Rule: getDiagnosisSeizures
(
    ({DiagnosisTriggers.majorType == "diagnosis"})
	(
	{Lookup.STY !=~ "[Ss]ign or [Ss]ymptom", Lookup.Plural == Yes, Lookup.Experiencer == Patient, Lookup.Negation == Affirmed, Lookup.Temporality != "hypothetical"}
	):item
):label
-->
:item.DiagnosisA = { rule = "getDiagnosisSeizures", PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, STY = :item.Lookup.STY, Negation = :item.Lookup.Negation,
Experiencer = :item.Lookup.Experiencer, Temporality = :item.Lookup.Temporality, Certainty = :item.Lookup.Certainty}

Rule: getDiagnosisEpilepsy
(
    ({DiagnosisTriggers.majorType == "diagnosis"})
	(
	({Lookup.STY !=~ "[Ss]ign or [Ss]ymptom", Lookup.Epilepsy == Yes, Lookup.Experiencer == Patient, Lookup.Negation == Affirmed, Lookup.Temporality != "hypothetical"})
	):item
):label
-->
:item.DiagnosisA = { rule = "getDiagnosisEpilepsy", PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, STY = :item.Lookup.STY, Negation = :item.Lookup.Negation,
Experiencer = :item.Lookup.Experiencer, Temporality = :item.Lookup.Temporality, Certainty = :item.Lookup.Certainty}


Rule: getDiagnosisEpilepsy2
(
	({DiagnosisTriggers})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	(({Lookup.STY !=~ "[Ss]ign or [Ss]ymptom", Lookup.Epilepsy == Yes, Lookup.Experiencer == Patient, Lookup.Negation == Affirmed, Lookup.Temporality != "hypothetical"})):item
):match1
-->
:item.DiagnosisA = { rule = "getDiagnosisEpilepsy2", PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, STY = :item.Lookup.STY, Negation = :item.Lookup.Negation,
Experiencer = :item.Lookup.Experiencer, Temporality = :item.Lookup.Temporality, Certainty = :item.Lookup.Certainty}


Rule: getDiagnosisSeizures2
(
	({DiagnosisTriggers})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	(({Lookup.STY !=~ "[Ss]ign or [Ss]ymptom", Lookup.Plural == Yes, Lookup.Experiencer == Patient, Lookup.Negation == Affirmed, Lookup.Temporality != "hypothetical"})):item
):match1
-->
:item.DiagnosisA = { rule = "getDiagnosisSeizures2", PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, STY = :item.Lookup.STY, Negation = :item.Lookup.Negation,
Experiencer = :item.Lookup.Experiencer, Temporality = :item.Lookup.Temporality, Certainty = :item.Lookup.Certainty}

Rule: getDiagnosisSeizures3
(
	({DiagnosisTriggers})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	(({Lookup.STY !=~ "[Ss]ign or [Ss]ymptom", Lookup.Plural == Yes, Lookup.Experiencer == Patient, Lookup.Negation == Affirmed, Lookup.Temporality != "hypothetical"})):item
):match1
-->
:item.DiagnosisA = { rule = "getDiagnosisSeizures3", PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, STY = :item.Lookup.STY, Negation = :item.Lookup.Negation,
Experiencer = :item.Lookup.Experiencer, Temporality = :item.Lookup.Temporality, Certainty = :item.Lookup.Certainty}


Rule: getDiagnosisSeizures3
(
	({DiagnosisTriggers})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	(({Lookup.STY !=~ "[Ss]ign or [Ss]ymptom", Lookup.Epilepsy == Yes, Lookup.Experiencer == Patient, Lookup.Negation == Affirmed, Lookup.Temporality != "hypothetical"})):item
):match1
-->
:item.DiagnosisA = { rule = "getDiagnosisEpilepsy3", PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, STY = :item.Lookup.STY, Negation = :item.Lookup.Negation,
Experiencer = :item.Lookup.Experiencer, Temporality = :item.Lookup.Temporality, Certainty = :item.Lookup.Certainty}


Rule: getDiagnosisSeizures4
(
	({DiagnosisTriggers})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	(({Lookup.STY !=~ "[Ss]ign or [Ss]ymptom", Lookup.Epilepsy == Yes, Lookup.Experiencer == Patient, Lookup.Negation == Affirmed, Lookup.Temporality != "hypothetical"})):item
):match1
-->
:item.DiagnosisA = { rule = "getDiagnosisEpilepsy4", PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, STY = :item.Lookup.STY, Negation = :item.Lookup.Negation,
Experiencer = :item.Lookup.Experiencer, Temporality = :item.Lookup.Temporality, Certainty = :item.Lookup.Certainty}


Rule: getDiagnosisSeizures5
(
	({DiagnosisTriggers})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	(({Lookup.STY !=~ "[Ss]ign or [Ss]ymptom", Lookup.Epilepsy == Yes, Lookup.Experiencer == Patient, Lookup.Negation == Affirmed, Lookup.Temporality != "hypothetical"})):item
):match1
-->
:item.DiagnosisA = { rule = "getDiagnosisEpilepsy5", PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, STY = :item.Lookup.STY, Negation = :item.Lookup.Negation,
Experiencer = :item.Lookup.Experiencer, Temporality = :item.Lookup.Temporality, Certainty = :item.Lookup.Certainty}

Rule: getDiagnosisSeizures3
(
	({DiagnosisTriggers})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	(({Lookup.STY !=~ "[Ss]ign or [Ss]ymptom", Lookup.Plural == Yes, Lookup.Experiencer == Patient, Lookup.Negation == Affirmed, Lookup.Temporality != "hypothetical"})):item
):match1
-->
:item.DiagnosisA = { rule = "getDiagnosisSeizures4", PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, STY = :item.Lookup.STY, Negation = :item.Lookup.Negation,
Experiencer = :item.Lookup.Experiencer, Temporality = :item.Lookup.Temporality, Certainty = :item.Lookup.Certainty}


Rule: getDiagnosisSeizures3
(
	({DiagnosisTriggers})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	({Lookup.Experiencer == Patient, Lookup.majorType == umls})
	(({Lookup.STY !=~ "[Ss]ign or [Ss]ymptom", Lookup.Plural == Yes, Lookup.Experiencer == Patient, Lookup.Negation == Affirmed, Lookup.Temporality != "hypothetical"})):item
):match1
-->
:item.DiagnosisA = { rule = "getDiagnosisSeizures5", PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, STY = :item.Lookup.STY, Negation = :item.Lookup.Negation,
Experiencer = :item.Lookup.Experiencer, Temporality = :item.Lookup.Temporality, Certainty = :item.Lookup.Certainty}