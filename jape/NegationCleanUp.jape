Imports: {import static gate.Utils.*; }

Phase: NegationCleanUp
Input: NegConj Lookup Sentence Trigger LookupTrigger Lookup3
Options: control=all

// What is "LookupTrigger" in the INPUT - its on ContextTagger Gazetteers
// Maybe its in to stop something that is already correct from being changed back

// Could we combine the two !NegConj and !Trigger into ({!NegConj}|{!Trigger})[0,2]
// Look at these two rules
Rule: reverseNegation
(
{Trigger}
({Lookup})[1,5]
{!NegConj} 
{!Trigger}
({Lookup.Negation == "Negated"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegationa");
},
:match.LookupNegChange = {rule = reverseNegation}


// Copy of rule above but lookup3 not lookup
Rule: reverseNegation
(
{Trigger}
({Lookup3})[1,5]
{!NegConj} 
{!Trigger}
({Lookup3.Negation == "Negated"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegationa");
},
:match.Lookup3NegChange = {rule = reverseNegation}

// seizure free  are not just a negation of seizures
// but a concept with its own CUI so this removes a negation from the lookup3 where they live
// it removes all negations of X free phrases

// Instead of changing the negation
// Before the context trigger has acted can we remove the 'Trigger' so it can't fire at all?
// "free" is not a Trigger anymore - removed in the past? - Can't find when (was something else triggering a negation here not "free")
// "non" is still there

Rule: removeSeizureFreeAsNegation
(
({Lookup contains Trigger@string=="free"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","removefree-asnegation");
},
:match.LookupNegChange = {rule = removeSeizureFreeAsNegation}


Rule: removeSeizureFreeAsNegation
(
({Lookup3 contains Trigger@string=="free"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","removefree-asnegation");
},
:match.Lookup3NegChange = {rule = removeSeizureFreeAsNegation}

// THESE TWO RULES NEED TO BE LOOKED AT

Rule: reverseNegation
(
{Trigger}
({LookupTrigger.Language == "Trigger"})[1,5]// Never going to get 5 of these
{!NegConj}
({Lookup.Negation == "Negated"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegationc");
},
:match.LookupNegChange = {rule = reverseNegation}


Rule: reverseNegation
(
{Trigger}
({LookupTrigger.Language == "Trigger"})[1,5]// Never going to get 5 of these
{!NegConj}
({Lookup3.Negation == "Negated"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegationc");
},
:match.Lookup3NegChange = {rule = reverseNegation}


// Non-epileptic seizures are not just a negation of epilepsy
// but a concept with its own CUI so this removes a negation from the lookup3 where they live
// it removes all negations of non-concept phrases


Rule: removenon-asnegation
(
({Lookup contains Trigger@string=~"[Nn]on"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","removenon-asnegation");
},
:match.LookupNegChange = {rule = removenon-asnegation}

Rule: removenon-asnegation
(
({Lookup3 contains Trigger@string=~"[Nn]on"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","removenon-asnegation");
},
:match.Lookup3NegChange = {rule = removenon-asnegation}