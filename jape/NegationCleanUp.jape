Imports: {import static gate.Utils.*; }

Phase: NegationCleanUp
Input: NegConj Lookup Sentence Trigger LookupTrigger Lookup3
Options: control=all

Rule: reverseNegation
(
{Trigger}
({Lookup})[1,5]
{!NegConj} 
{!Trigger}
({Lookup.Negation == "Negated"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegationa");
}


Rule: reverseNegation
(
{Trigger}
({Lookup3})[1,5]
{!NegConj} 
{!Trigger}
({Lookup3.Negation == "Negated"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegationa");
}


Rule: removeSeizureFreeAsNegation
(
({Lookup contains Trigger@string=="free"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegationb");
}


Rule: removeSeizureFreeAsNegation
(
({Lookup3 contains Trigger@string=="free"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegationb");
}



Rule: reverseNegation
(
{Trigger}
({LookupTrigger.Language == "Trigger"})[1,5]
{!NegConj}
({Lookup.Negation == "Negated"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegationc");
}


Rule: reverseNegation
(
{Trigger}
({LookupTrigger.Language == "Trigger"})[1,5]
{!NegConj}
({Lookup3.Negation == "Negated"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","reverseNegationc");
}

/*
 * Non-epileptic seizures are not just a negation of epilepsy
 * but a concept with its own CUI so this removes a negation from the lookup3 where they live
 * it removes all negations of non-concept phrases
 */


Rule: removenon-asnegation
(
({Lookup contains Trigger@string=~"[Nn]on"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","removenon-asnegation");
}

Rule: removenon-asnegation
(
({Lookup3 contains Trigger@string=~"[Nn]on"}):umls
):match
-->
:umls {
umlsAnnots.iterator().next().getFeatures().put("Negation","Affirmed");
umlsAnnots.iterator().next().getFeatures().put("rule","removenon-asnegation");

}