Phase: TimeSinceOnset
Input: Lookup3 Lookup Person Sentence Numeric timePeriod timeElapsed Lookup2 
Number Split Age DiagnosisTriggers MedCause NumberRange Frequency

Options: control=appelt		


Rule: seizuresFor1
Priority: 100

(   
    {Person}
	({Lookup3.majorType == umls , Lookup3.Negation == Affirmed}):item
	{timeElapsed}
	{Numeric} 
    {timePeriod}
 ):match  
 -->
:item.TimeSinceOnset = {rule = seizuresFor1 , OnsetType = "time_since_episodes_started",
PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, TUI = :item.Lookup3.TUI,
STY = :item.Lookup3.STY, 
Certainty = :item.Lookup3.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value,
LowerNumberOfTimePeriods = "",
UpperNumberOfTimePeriods = ""}



Rule: seizuresFor2
Priority: 99

(   
    {Person}
	{Lookup2.language == onset}
	({Lookup3.majorType == umls , Lookup3.Negation == Affirmed}):item
	({Person})?
	({Lookup2})?
	{timeElapsed}
	{Numeric} 
    {timePeriod}
	
 ):match  
 -->
:item.TimeSinceOnset = {rule = seizuresFor2 , OnsetType = "time_since_episodes_started",
PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, TUI = :item.Lookup3.TUI,
STY = :item.Lookup3.STY, 
Certainty = :item.Lookup3.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value,
LowerNumberOfTimePeriods = "",
UpperNumberOfTimePeriods = ""}

Rule: seizuresFor3
Priority: 99

(   
    {Person}
	({Lookup2.language == onset})?
	({Lookup.majorType == umls , Lookup.Negation == Affirmed, Lookup.Epilepsy == Yes}):item
	{timeElapsed}
	{Numeric} 
    {timePeriod}
	
	

 ):match  
 -->
:item.TimeSinceOnset = {rule = seizuresFor3 , OnsetType = "time_since_episodes_started",
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value,
LowerNumberOfTimePeriods = "",
UpperNumberOfTimePeriods = ""}


Rule: seizuresFor4
Priority: 99

(   
    {Person}
    {timeElapsed}
    ({Lookup.majorType == umls , Lookup.Negation == Affirmed}):item
    {Split}
    {Person}
    {Lookup2.minorType == symptoms}
	{timeElapsed}
	{Numeric}
    {timePeriod}
	
	
 ):match  
 -->
:item.TimeSinceOnset = {rule = seizuresFor4, OnsetType = "time_since_episodes_started", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods = :match.Numeric.value,
LowerNumberOfTimePeriods = "",
UpperNumberOfTimePeriods = ""}

Rule: seizuresFor5
Priority: 98

(   
	({timeElapsed.time == during})
	{Numeric}
	{timePeriod}
	{Person}
	({Lookup3.majorType == umls , Lookup3.Negation == Affirmed}):item
	
	
	
 ):match  
 -->
:item.TimeSinceOnset = {rule = seizuresFor5, OnsetType = "time_since_episodes_started", 
PREF = :item.Lookup3.PREF, CUI = :item.Lookup3.CUI, TUI = :item.Lookup3.TUI,
STY = :item.Lookup3.STY, 
Certainty = :item.Lookup3.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value,
LowerNumberOfTimePeriods = "",
UpperNumberOfTimePeriods = ""}

Rule: seizuresFor6
Priority: 98

(   
	{Person}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed}):item
	{Lookup2}
	{Numeric}
	{timePeriod}
	{timeElapsed.majorType == context}
	
	
 ):match  
 -->
:item.TimeSinceOnset = {rule = seizuresFor6, OnsetType = "time_since_episodes_started", 
PREF = :match.Lookup.PREF, CUI = :match.Lookup.CUI, TUI = :match.Lookup.TUI,
STY = :match.Lookup.STY, 
Certainty = :match.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value,
LowerNumberOfTimePeriods = "",
UpperNumberOfTimePeriods = ""}

Rule: seizuresFor7
Priority: 98

(   
	{timeElapsed.majorType == context}
	{timePeriod}
	{Person}
	({Lookup3.majorType == umls , Lookup3.Negation == Affirmed}):a
	{Lookup3}
	
	
):match  
 -->
:a.TimeSinceOnset = {rule = seizuresFor7, OnsetType = "time_since_episodes_started", 
PREF = :a.Lookup3.PREF, CUI = :a.Lookup3.CUI, TUI = :a.Lookup3.TUI,
STY = :a.Lookup3.STY, 
Certainty = :a.Lookup3.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods ="1",
LowerNumberOfTimePeriods = "",
UpperNumberOfTimePeriods = ""}

 
Rule: seizuresFor8
Priority: 98

(   
	{timeElapsed.majorType == context}
	{timePeriod}
	{Person}
	({Lookup3.majorType == umls , Lookup3.Negation == Affirmed}):a
	({Lookup3.majorType == umls , Lookup3.Negation == Affirmed}):b
	
	
 ):match  
 -->
:b.TimeSinceOnset = {rule = seizuresFor8, OnsetType = "time_since_episodes_started", 
PREF = :b.Lookup3.PREF, CUI = :b.Lookup3.CUI, TUI = :b.Lookup3.TUI,
STY = :b.Lookup3.STY, 
Certainty = :b.Lookup3.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods ="1",
LowerNumberOfTimePeriods = "",
UpperNumberOfTimePeriods = ""}

Rule: seizuresFor9
Priority: 98

(   
	
	{Lookup2.majorType == person}
	{timeElapsed.majorType == context}
	{Numeric}
	{timePeriod}
	{Lookup2.language == onset}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed}):item
	
	
 ):match  
 -->
:item.TimeSinceOnset = {rule = seizuresFor9, OnsetType = "time_since_episodes_started", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value,
LowerNumberOfTimePeriods = "",
UpperNumberOfTimePeriods = ""}


Rule: seizuresFor10
Priority: 98

(   
	{Person}
	{Lookup2}
	{Lookup3}
	{Lookup2.minorType == symptoms}
	({Lookup.minorType == Disease, Lookup.majorType == umls}):item
    {timeElapsed.time == during}
    {Numeric}
    {timePeriod}
	
	
 ):match  
 -->
:item.TimeSinceOnset = {rule = seizuresFor10, OnsetType = "time_since_episodes_started", 
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value,
LowerNumberOfTimePeriods = "",
UpperNumberOfTimePeriods = ""}


	
    
