Phase: TimeSinceOnset
Input: Lookup3 Lookup Person Sentence Numeric timePeriod timeElapsed Lookup2 Number Split Age

Options: control=appelt

Rule: seizuresFor1
Priority: 100

(   
    {Person}
	{Lookup3.majorType == umls , Lookup3.Negation == Affirmed}
	{timeElapsed}
	{Numeric} 
    {timePeriod}
 ):match  
 -->
:match.TimeSinceOnset = {rule = seizuresFor1 , OnsetType = "time_since_episodes_started",
PREF = :match.Lookup3.PREF, CUI = :match.Lookup3.CUI, TUI = :match.Lookup3.TUI,
STY = :match.Lookup3.STY, 
Certainty = :match.Lookup3.Certainty,
timePeriod = :match.timePeriod.time-unit,
value =:match.Numeric.value}

Rule: seizuresFor2
Priority: 99

(   
    {Person}
	{Lookup2.language == onset}
	{Lookup3.majorType == umls , Lookup3.Negation == Affirmed}
	({Person})?
	({Lookup2})?
	{timeElapsed}
	{Numeric} 
    {timePeriod}
	{timeElapsed}
 ):match  
 -->
:match.TimeSinceOnset = {rule = seizuresFor2 , OnsetType = "time_since_episodes_started",
PREF = :match.Lookup3.PREF, CUI = :match.Lookup3.CUI, TUI = :match.Lookup3.TUI,
STY = :match.Lookup3.STY, 
Certainty = :match.Lookup3.Certainty,
timePeriod = :match.timePeriod.time-unit,
value =:match.Numeric.value}

Rule: seizuresFor3
Priority: 99

(   
    {Person}
	{Lookup2.language == onset}
	{Lookup3.majorType == umls , Lookup3.Negation == Affirmed}
	({Person})?
	({Lookup2})?
	{timeElapsed}
	{Number} 
    {timePeriod}
	
 ):match  
 -->
:match.TimeSinceOnset = {rule = seizuresFor3 , OnsetType = "time_since_episodes_started",
PREF = :match.Lookup3.PREF, CUI = :match.Lookup3.CUI, TUI = :match.Lookup3.TUI,
STY = :match.Lookup3.STY, 
Certainty = :match.Lookup3.Certainty,
timePeriod = :match.timePeriod.time-unit,
value =:match.Number.value}

Rule: seizuresFor4
Priority: 99

(   
    {Person}
	{Lookup2.language == onset}
	{Lookup.majorType == umls , Lookup.Negation == Affirmed}
	{timeElapsed}
	{Numeric} 
    {timePeriod}
	
	

 ):match  
 -->
:match.TimeSinceOnset = {rule = seizuresFor4 , OnsetType = "time_since_episodes_started",
PREF = :match.Lookup.PREF, CUI = :match.Lookup.CUI, TUI = :match.Lookup.TUI,
STY = :match.Lookup.STY, 
Certainty = :match.Lookup.Certainty,
timePeriod = :match.timePeriod.time-unit,
value =:match.Numeric.value}


Rule: seizuresFor5
Priority: 99

(   
    {Person}
    {timeElapsed}
    ({Lookup.majorType == umls , Lookup.Negation == Affirmed})
    {Split}
    {Person}
    {Lookup2.minorType == symptoms}
	{timeElapsed}
	{Numeric}
    {timePeriod}
	
	
 ):match  
 -->
:match.TimeSinceOnset = {rule = seizuresFor5, OnsetType = "time_since_episodes_started", 
PREF = :match.Lookup.PREF, CUI = :match.Lookup.CUI, TUI = :match.Lookup.TUI,
STY = :match.Lookup.STY, 
Certainty = :match.Lookup.Certainty,
timePeriod = :match.timePeriod.time-unit,
Year = :match.Numeric.value,
Month ="",
Day = ""}

Rule: seizuresFor6
Priority: 98

(   
	{Person}
	{Lookup.majorType == umls , Lookup.Negation == Affirmed}
	{timeElapsed.majorType == context}
	{Numeric}
	{timePeriod}

	
	
 ):match  
 -->
:match.TimeSinceOnset = {rule = seizuresFor6, OnsetType = "time_since_episodes_started", 
PREF = :match.Lookup.PREF, CUI = :match.Lookup.CUI, TUI = :match.Lookup.TUI,
STY = :match.Lookup.STY, 
Certainty = :match.Lookup.Certainty,
timePeriod = :match.timePeriod.time-unit,
value =:match.Numeric.value}

Rule: seizuresFor7
Priority: 98

(   
	{Person}
	{Lookup.majorType == umls , Lookup.Negation == Affirmed}
	{Lookup2}
	{Numeric}
	{timePeriod}
	{timeElapsed.majorType == context}
	
	
 ):match  
 -->
:match.TimeSinceOnset = {rule = seizuresFor7, OnsetType = "time_since_episodes_started", 
PREF = :match.Lookup.PREF, CUI = :match.Lookup.CUI, TUI = :match.Lookup.TUI,
STY = :match.Lookup.STY, 
Certainty = :match.Lookup.Certainty,
timePeriod = :match.timePeriod.time-unit,
value =:match.Numeric.value}