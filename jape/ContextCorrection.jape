Imports: {import static gate.Utils.*; }

Phase: ModifyLookups
Input: Context Lookup3 Sentence
Options: control=brill


// If for some reason context is not applied , i.e. future or hypothetical 
// lookup gets recent Temporality, this rule tries to correct it.

// Could be that more needs to be added to the hypothetical triggers (not very many in there from what I can see)
// But this rule looks good at cleaning up a lot of these misses.

//Hypotheitical to lower case to match context
Rule: ContextCorrection
Priority: 100
(
	{Context.context == hypothetical}
	({Lookup3.majorType == umls, Lookup3.Temporality == Recent}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Temporality","hypothetical");
  umlsAnnots.iterator().next().getFeatures().put("rule","ContextCorrection");
},
:umls.Lookup3TepChange = {rule = ContextCorrection}

Rule: ContextCorrection2
Priority: 100
(
	{Context.context == hypothetical}
	({Lookup3.majorType == umls, Lookup3.Temporality == historical}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Temporality","hypothetical");
  umlsAnnots.iterator().next().getFeatures().put("rule","ContextCorrection");
},
:umls.Lookup3TepChange = {rule = ContextCorrection2}

// This is to change GATE's built in Context with trigger 'if' for phrases  such as 'as if he is' - which seem less hypothetical added to our context list in Generic gaz
Rule: ContextCorrection3
Priority: 100
(
	{Context.context == current}
	({Lookup3.majorType == umls, Lookup3.minorType == generic, Lookup3.Temporality == hypothetical}):umls
):match
-->
:umls {
  umlsAnnots.iterator().next().getFeatures().put("Temporality","Recent");
  umlsAnnots.iterator().next().getFeatures().put("rule","ContextCorrection");
},
:umls.Lookup3TepChange = {rule = ContextCorrection2}
