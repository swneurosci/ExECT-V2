Phase: OtherDiagnosisListF
Input: OtherDiag DiagnosisTriggers Conj NewLine

Options: control=brill

/*These are for list with "alternative" list points */

Rule: OtherDiagListF1
Priority: 100

(   
({DiagnosisTriggers.type == diagnosis})
	({Conj.type == list})
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagListF1,   PREF = :item.OtherDiag.PREF,
// STY = :item.OtherDiag.STY, 
// Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, CUI = :item.OtherDiag.CUI, 
Negation = :item.OtherDiag.Negation}

Rule: OtherDiagListF2
Priority: 99

(   
	({DiagnosisTriggers.type == diagnosis})
	{Conj.type == list}
	{OtherDiag}
	({Conj.type == list}|{Conj.type == with})
	({OtherDiag}):item
	
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagListF2,  PREF = :item.OtherDiag.PREF,
// STY = :item.OtherDiag.STY, 
// Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, CUI = :item.OtherDiag.CUI, 
Negation = :item.OtherDiag.Negation}


Rule: OtherDiagListF3
Priority: 98

(   
	({DiagnosisTriggers.type == diagnosis})
	{Conj.type == list}
	{Conj.type == list}
	{OtherDiag}
	{Conj.type == list}
	({OtherDiag}):item
	
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagListF3,  PREF = :item.OtherDiag.PREF,
// STY = :item.OtherDiag.STY, 
// Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, CUI = :item.OtherDiag.CUI, 
Negation = :item.OtherDiag.Negation}


Rule: OtherDiagListF4
Priority: 97

(   
	({DiagnosisTriggers.type == diagnosis})
	{Conj.type == list}
	{Conj.type == list}
	{OtherDiag}
	{Conj.type == list}
	{OtherDiag}
	{Conj.type == list}
	({OtherDiag}):item
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagListF4, PREF = :item.OtherDiag.PREF,
// STY = :item.OtherDiag.STY, 
// Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, CUI = :item.OtherDiag.CUI, 
Negation = :item.OtherDiag.Negation}

 //when there are no list points, no list sentences//

Rule: OtherDiagnosis8 //with a list of seizures
Priority: 100

(  
	{DiagnosisTriggers.type == diagnosis}
	({Conj})?
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagnosis8,  PREF = :item.OtherDiag.PREF,
// STY = :item.OtherDiag.STY, 
// Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, CUI = :item.OtherDiag.CUI, 
Negation = :item.OtherDiag.Negation}

Rule: OtherDiagnosis8a //when the list starts with a new line
Priority: 100

(  
	{DiagnosisTriggers.type == diagnosis}
	({NewLine})?
	({Conj.type == list})
	({Conj})
	({Conj})
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagnosis8a,  PREF = :item.OtherDiag.PREF,
// STY = :item.OtherDiag.STY, 
// Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, CUI = :item.OtherDiag.CUI, 
Negation = :item.OtherDiag.Negation}

Rule: OtherDiagnosis8b //when the list starts with a new line
Priority: 100

(  
	{DiagnosisTriggers.type == diagnosis}
	({NewLine})?
	({Conj.type == list})
	({Conj})
	({Conj})
	{OtherDiag}
	({OtherDiag}):item
    
 ):match  
 -->
:item.PatientHistory = {rule = OtherDiagnosisb,  PREF = :item.OtherDiag.PREF,
// STY = :item.OtherDiag.STY, 
// Experiencer = :item.OtherDiag.Experiencer, Temporality = :item.OtherDiag.Temporality, 
Certainty = :item.OtherDiag.Certainty, CUI = :item.OtherDiag.CUI, 
Negation = :item.OtherDiag.Negation}