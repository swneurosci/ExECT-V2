Phase: AgeDiagnosed
Input: Lookup Person Lookup2 Sentence Age DiagnosisTriggers OtherPerson


  /*includes AgeDiagnosedRange*/

Options: control=appelt


Rule: AgeDiagnosed1
Priority: 100

(   
	{Person}
    {Lookup2.majorType == historic}
    {DiagnosisTriggers.type == diagnosis}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed ,Lookup.Experiencer == Patient }):item
	({Person})?
	({Lookup2.minorType !=date})?
	{Age}
		
 ):match  
 -->
:item.WhenDiagnosed = {rule = AgeDiagnosed1, OnsetType = "Age_Diagnosed", 
// PREF = :item.Lookup.PREF,  TUI = :item.Lookup.TUI,
// STY = :item.Lookup.STY,  Experiencer = :item.Lookup.Experiencer,
Certainty = :item.Lookup.Certainty, CUI = :item.Lookup.CUI, Negation = :item.Lookup.Negation,
Age = :match.Age.Age,
AgeUnit = :match.Age.AgeUnit,
AgeLower = :match.Age.AgeLower,
AgeUpper =:match.Age.AgeUpper}


Rule: AgeDiagnosed2
Priority: 99

(   
	{Person}
    {Lookup2.majorType == historic}
    {DiagnosisTriggers.type == diagnosis}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.Experiencer == Patient }):item
	{Age}

	
 ):match  
 -->
:item.WhenDiagnosed = {rule = AgeDiagnosed2, OnsetType = "Age_Diagnosed", 
// PREF = :item.Lookup.PREF,  TUI = :item.Lookup.TUI,
// STY = :item.Lookup.STY,  Experiencer = :item.Lookup.Experiencer,
Certainty = :item.Lookup.Certainty, CUI = :item.Lookup.CUI, Negation = :item.Lookup.Negation,
Age = :match.Age.Age,
AgeUnit = :match.Age.AgeUnit,
AgeLower = :match.Age.AgeLower,
AgeUpper =:match.Age.AgeUpper}

Rule: AgeDiagnosed2b
Priority: 99

(   
	{Person}
    {Lookup2.majorType == historic}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.Experiencer == Patient }):item
    {DiagnosisTriggers.type == diagnosis}
	{Age}
	
 ):match  
 -->
:item.WhenDiagnosed = {rule = AgeDiagnosed2b, OnsetType = "Age_Diagnosed", 
// PREF = :item.Lookup.PREF,  TUI = :item.Lookup.TUI,
// STY = :item.Lookup.STY,  Experiencer = :item.Lookup.Experiencer,
Certainty = :item.Lookup.Certainty, CUI = :item.Lookup.CUI, Negation = :item.Lookup.Negation,
Age = :match.Age.Age,
AgeUnit = :match.Age.AgeUnit,
AgeLower = :match.Age.AgeLower,
AgeUpper =:match.Age.AgeUpper}

Rule: AgeDiagnosed3		//Epilepsy - diagnosed age 1//
Priority: 99

(   

	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.Experiencer == Patient }):item
	({Lookup2})?
    {DiagnosisTriggers.type == diagnosis}
	{Age}
	
 ):match  
 -->
:item.WhenDiagnosed = {rule = AgeDiagnosed3, OnsetType = "Age_Diagnosed", 
// PREF = :item.Lookup.PREF,  TUI = :item.Lookup.TUI,
// STY = :item.Lookup.STY,  Experiencer = :item.Lookup.Experiencer,
Certainty = :item.Lookup.Certainty, CUI = :item.Lookup.CUI, Negation = :item.Lookup.Negation,
Age = :match.Age.Age,
AgeUnit = :match.Age.AgeUnit,
AgeLower = :match.Age.AgeLower,
AgeUpper =:match.Age.AgeUpper}

//A the age of 10 she was diagnosed with epilepsy//
Rule: AgeDiagnosed4
Priority: 99

(   
	({Lookup2.type != began})
	{Age}
	({Person})?
	({Lookup2.majorType == historic})?
	{DiagnosisTriggers.type == diagnosis}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.Experiencer == Patient }):item
    	
 ):match  
 -->
:item.WhenDiagnosed = {rule = AgeDiagnosed4, OnsetType = "Age_Diagnosed", 
// PREF = :item.Lookup.PREF,  TUI = :item.Lookup.TUI,
// STY = :item.Lookup.STY,  Experiencer = :item.Lookup.Experiencer,
Certainty = :item.Lookup.Certainty, CUI = :item.Lookup.CUI, Negation = :item.Lookup.Negation,
Age = :match.Age.Age,
AgeUnit = :match.Age.AgeUnit,
AgeLower = :match.Age.AgeLower,
AgeUpper =:match.Age.AgeUpper}



