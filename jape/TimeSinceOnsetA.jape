Phase: TimeSinceOnsetA
Input: Lookup3 Lookup Person Sentence Numeric timePeriod timeElapsed Lookup2 Age 


Options: control=appelt		


Rule: TimeSinceOnsetA1
Priority: 100

(   
    {Person}
    ({Lookup2})
	{Lookup2.language  == onset , Lookup2.type == suffered}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.minorType == Disease}):item
	({timeElapsed})
	{Numeric} 
    {timePeriod}
	

 ):match  
 -->

:item.Onset = {rule = TimeSinceOnsetA1 , OnsetType = "time_since_episodes_started",
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value}

Rule: TimeSinceOnsetA2
Priority: 100

(   
    {Person}
    ({Lookup})
	{Lookup2.language  == onset , Lookup2.type == began}
	({Lookup.majorType == umls , Lookup.Negation == Affirmed , Lookup.minorType == Disease}):item
	({timeElapsed})
	{Numeric} 
    {timePeriod}
	

 ):match  
 -->

:item.Onset = {rule = TimeSinceOnsetA2 , OnsetType = "time_since_episodes_started",
PREF = :item.Lookup.PREF, CUI = :item.Lookup.CUI, TUI = :item.Lookup.TUI,
STY = :item.Lookup.STY, 
Certainty = :item.Lookup.Certainty,
TimePeriod = :match.timePeriod.time-unit,
NumberOfTimePeriods =:match.Numeric.value}
